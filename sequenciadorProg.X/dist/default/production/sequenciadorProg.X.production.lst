

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Nov 21 20:33:43 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	dabs	1,0x7E,2
    37  0000                     
    38                           ; Version 2.05
    39                           ; Generated 20/12/2018 GMT
    40                           ; 
    41                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC16F887 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     	;# 
    73  0001                     	;# 
    74  0002                     	;# 
    75  0003                     	;# 
    76  0004                     	;# 
    77  0005                     	;# 
    78  0006                     	;# 
    79  0007                     	;# 
    80  0008                     	;# 
    81  0009                     	;# 
    82  000A                     	;# 
    83  000B                     	;# 
    84  000C                     	;# 
    85  000D                     	;# 
    86  000E                     	;# 
    87  000E                     	;# 
    88  000F                     	;# 
    89  0010                     	;# 
    90  0011                     	;# 
    91  0012                     	;# 
    92  0013                     	;# 
    93  0014                     	;# 
    94  0015                     	;# 
    95  0015                     	;# 
    96  0016                     	;# 
    97  0017                     	;# 
    98  0018                     	;# 
    99  0019                     	;# 
   100  001A                     	;# 
   101  001B                     	;# 
   102  001B                     	;# 
   103  001C                     	;# 
   104  001D                     	;# 
   105  001E                     	;# 
   106  001F                     	;# 
   107  0081                     	;# 
   108  0085                     	;# 
   109  0086                     	;# 
   110  0087                     	;# 
   111  0088                     	;# 
   112  0089                     	;# 
   113  008C                     	;# 
   114  008D                     	;# 
   115  008E                     	;# 
   116  008F                     	;# 
   117  0090                     	;# 
   118  0091                     	;# 
   119  0092                     	;# 
   120  0093                     	;# 
   121  0093                     	;# 
   122  0093                     	;# 
   123  0094                     	;# 
   124  0095                     	;# 
   125  0096                     	;# 
   126  0097                     	;# 
   127  0098                     	;# 
   128  0099                     	;# 
   129  009A                     	;# 
   130  009B                     	;# 
   131  009C                     	;# 
   132  009D                     	;# 
   133  009E                     	;# 
   134  009F                     	;# 
   135  0105                     	;# 
   136  0107                     	;# 
   137  0108                     	;# 
   138  0109                     	;# 
   139  010C                     	;# 
   140  010C                     	;# 
   141  010D                     	;# 
   142  010E                     	;# 
   143  010F                     	;# 
   144  0185                     	;# 
   145  0187                     	;# 
   146  0188                     	;# 
   147  0189                     	;# 
   148  018C                     	;# 
   149  018D                     	;# 
   150  0000                     	;# 
   151  0001                     	;# 
   152  0002                     	;# 
   153  0003                     	;# 
   154  0004                     	;# 
   155  0005                     	;# 
   156  0006                     	;# 
   157  0007                     	;# 
   158  0008                     	;# 
   159  0009                     	;# 
   160  000A                     	;# 
   161  000B                     	;# 
   162  000C                     	;# 
   163  000D                     	;# 
   164  000E                     	;# 
   165  000E                     	;# 
   166  000F                     	;# 
   167  0010                     	;# 
   168  0011                     	;# 
   169  0012                     	;# 
   170  0013                     	;# 
   171  0014                     	;# 
   172  0015                     	;# 
   173  0015                     	;# 
   174  0016                     	;# 
   175  0017                     	;# 
   176  0018                     	;# 
   177  0019                     	;# 
   178  001A                     	;# 
   179  001B                     	;# 
   180  001B                     	;# 
   181  001C                     	;# 
   182  001D                     	;# 
   183  001E                     	;# 
   184  001F                     	;# 
   185  0081                     	;# 
   186  0085                     	;# 
   187  0086                     	;# 
   188  0087                     	;# 
   189  0088                     	;# 
   190  0089                     	;# 
   191  008C                     	;# 
   192  008D                     	;# 
   193  008E                     	;# 
   194  008F                     	;# 
   195  0090                     	;# 
   196  0091                     	;# 
   197  0092                     	;# 
   198  0093                     	;# 
   199  0093                     	;# 
   200  0093                     	;# 
   201  0094                     	;# 
   202  0095                     	;# 
   203  0096                     	;# 
   204  0097                     	;# 
   205  0098                     	;# 
   206  0099                     	;# 
   207  009A                     	;# 
   208  009B                     	;# 
   209  009C                     	;# 
   210  009D                     	;# 
   211  009E                     	;# 
   212  009F                     	;# 
   213  0105                     	;# 
   214  0107                     	;# 
   215  0108                     	;# 
   216  0109                     	;# 
   217  010C                     	;# 
   218  010C                     	;# 
   219  010D                     	;# 
   220  010E                     	;# 
   221  010F                     	;# 
   222  0185                     	;# 
   223  0187                     	;# 
   224  0188                     	;# 
   225  0189                     	;# 
   226  018C                     	;# 
   227  018D                     	;# 
   228  0000                     	;# 
   229  0001                     	;# 
   230  0002                     	;# 
   231  0003                     	;# 
   232  0004                     	;# 
   233  0005                     	;# 
   234  0006                     	;# 
   235  0007                     	;# 
   236  0008                     	;# 
   237  0009                     	;# 
   238  000A                     	;# 
   239  000B                     	;# 
   240  000C                     	;# 
   241  000D                     	;# 
   242  000E                     	;# 
   243  000E                     	;# 
   244  000F                     	;# 
   245  0010                     	;# 
   246  0011                     	;# 
   247  0012                     	;# 
   248  0013                     	;# 
   249  0014                     	;# 
   250  0015                     	;# 
   251  0015                     	;# 
   252  0016                     	;# 
   253  0017                     	;# 
   254  0018                     	;# 
   255  0019                     	;# 
   256  001A                     	;# 
   257  001B                     	;# 
   258  001B                     	;# 
   259  001C                     	;# 
   260  001D                     	;# 
   261  001E                     	;# 
   262  001F                     	;# 
   263  0081                     	;# 
   264  0085                     	;# 
   265  0086                     	;# 
   266  0087                     	;# 
   267  0088                     	;# 
   268  0089                     	;# 
   269  008C                     	;# 
   270  008D                     	;# 
   271  008E                     	;# 
   272  008F                     	;# 
   273  0090                     	;# 
   274  0091                     	;# 
   275  0092                     	;# 
   276  0093                     	;# 
   277  0093                     	;# 
   278  0093                     	;# 
   279  0094                     	;# 
   280  0095                     	;# 
   281  0096                     	;# 
   282  0097                     	;# 
   283  0098                     	;# 
   284  0099                     	;# 
   285  009A                     	;# 
   286  009B                     	;# 
   287  009C                     	;# 
   288  009D                     	;# 
   289  009E                     	;# 
   290  009F                     	;# 
   291  0105                     	;# 
   292  0107                     	;# 
   293  0108                     	;# 
   294  0109                     	;# 
   295  010C                     	;# 
   296  010C                     	;# 
   297  010D                     	;# 
   298  010E                     	;# 
   299  010F                     	;# 
   300  0185                     	;# 
   301  0187                     	;# 
   302  0188                     	;# 
   303  0189                     	;# 
   304  018C                     	;# 
   305  018D                     	;# 
   306  0000                     	;# 
   307  0001                     	;# 
   308  0002                     	;# 
   309  0003                     	;# 
   310  0004                     	;# 
   311  0005                     	;# 
   312  0006                     	;# 
   313  0007                     	;# 
   314  0008                     	;# 
   315  0009                     	;# 
   316  000A                     	;# 
   317  000B                     	;# 
   318  000C                     	;# 
   319  000D                     	;# 
   320  000E                     	;# 
   321  000E                     	;# 
   322  000F                     	;# 
   323  0010                     	;# 
   324  0011                     	;# 
   325  0012                     	;# 
   326  0013                     	;# 
   327  0014                     	;# 
   328  0015                     	;# 
   329  0015                     	;# 
   330  0016                     	;# 
   331  0017                     	;# 
   332  0018                     	;# 
   333  0019                     	;# 
   334  001A                     	;# 
   335  001B                     	;# 
   336  001B                     	;# 
   337  001C                     	;# 
   338  001D                     	;# 
   339  001E                     	;# 
   340  001F                     	;# 
   341  0081                     	;# 
   342  0085                     	;# 
   343  0086                     	;# 
   344  0087                     	;# 
   345  0088                     	;# 
   346  0089                     	;# 
   347  008C                     	;# 
   348  008D                     	;# 
   349  008E                     	;# 
   350  008F                     	;# 
   351  0090                     	;# 
   352  0091                     	;# 
   353  0092                     	;# 
   354  0093                     	;# 
   355  0093                     	;# 
   356  0093                     	;# 
   357  0094                     	;# 
   358  0095                     	;# 
   359  0096                     	;# 
   360  0097                     	;# 
   361  0098                     	;# 
   362  0099                     	;# 
   363  009A                     	;# 
   364  009B                     	;# 
   365  009C                     	;# 
   366  009D                     	;# 
   367  009E                     	;# 
   368  009F                     	;# 
   369  0105                     	;# 
   370  0107                     	;# 
   371  0108                     	;# 
   372  0109                     	;# 
   373  010C                     	;# 
   374  010C                     	;# 
   375  010D                     	;# 
   376  010E                     	;# 
   377  010F                     	;# 
   378  0185                     	;# 
   379  0187                     	;# 
   380  0188                     	;# 
   381  0189                     	;# 
   382  018C                     	;# 
   383  018D                     	;# 
   384  0000                     	;# 
   385  0001                     	;# 
   386  0002                     	;# 
   387  0003                     	;# 
   388  0004                     	;# 
   389  0005                     	;# 
   390  0006                     	;# 
   391  0007                     	;# 
   392  0008                     	;# 
   393  0009                     	;# 
   394  000A                     	;# 
   395  000B                     	;# 
   396  000C                     	;# 
   397  000D                     	;# 
   398  000E                     	;# 
   399  000E                     	;# 
   400  000F                     	;# 
   401  0010                     	;# 
   402  0011                     	;# 
   403  0012                     	;# 
   404  0013                     	;# 
   405  0014                     	;# 
   406  0015                     	;# 
   407  0015                     	;# 
   408  0016                     	;# 
   409  0017                     	;# 
   410  0018                     	;# 
   411  0019                     	;# 
   412  001A                     	;# 
   413  001B                     	;# 
   414  001B                     	;# 
   415  001C                     	;# 
   416  001D                     	;# 
   417  001E                     	;# 
   418  001F                     	;# 
   419  0081                     	;# 
   420  0085                     	;# 
   421  0086                     	;# 
   422  0087                     	;# 
   423  0088                     	;# 
   424  0089                     	;# 
   425  008C                     	;# 
   426  008D                     	;# 
   427  008E                     	;# 
   428  008F                     	;# 
   429  0090                     	;# 
   430  0091                     	;# 
   431  0092                     	;# 
   432  0093                     	;# 
   433  0093                     	;# 
   434  0093                     	;# 
   435  0094                     	;# 
   436  0095                     	;# 
   437  0096                     	;# 
   438  0097                     	;# 
   439  0098                     	;# 
   440  0099                     	;# 
   441  009A                     	;# 
   442  009B                     	;# 
   443  009C                     	;# 
   444  009D                     	;# 
   445  009E                     	;# 
   446  009F                     	;# 
   447  0105                     	;# 
   448  0107                     	;# 
   449  0108                     	;# 
   450  0109                     	;# 
   451  010C                     	;# 
   452  010C                     	;# 
   453  010D                     	;# 
   454  010E                     	;# 
   455  010F                     	;# 
   456  0185                     	;# 
   457  0187                     	;# 
   458  0188                     	;# 
   459  0189                     	;# 
   460  018C                     	;# 
   461  018D                     	;# 
   462  0000                     	;# 
   463  0001                     	;# 
   464  0002                     	;# 
   465  0003                     	;# 
   466  0004                     	;# 
   467  0005                     	;# 
   468  0006                     	;# 
   469  0007                     	;# 
   470  0008                     	;# 
   471  0009                     	;# 
   472  000A                     	;# 
   473  000B                     	;# 
   474  000C                     	;# 
   475  000D                     	;# 
   476  000E                     	;# 
   477  000E                     	;# 
   478  000F                     	;# 
   479  0010                     	;# 
   480  0011                     	;# 
   481  0012                     	;# 
   482  0013                     	;# 
   483  0014                     	;# 
   484  0015                     	;# 
   485  0015                     	;# 
   486  0016                     	;# 
   487  0017                     	;# 
   488  0018                     	;# 
   489  0019                     	;# 
   490  001A                     	;# 
   491  001B                     	;# 
   492  001B                     	;# 
   493  001C                     	;# 
   494  001D                     	;# 
   495  001E                     	;# 
   496  001F                     	;# 
   497  0081                     	;# 
   498  0085                     	;# 
   499  0086                     	;# 
   500  0087                     	;# 
   501  0088                     	;# 
   502  0089                     	;# 
   503  008C                     	;# 
   504  008D                     	;# 
   505  008E                     	;# 
   506  008F                     	;# 
   507  0090                     	;# 
   508  0091                     	;# 
   509  0092                     	;# 
   510  0093                     	;# 
   511  0093                     	;# 
   512  0093                     	;# 
   513  0094                     	;# 
   514  0095                     	;# 
   515  0096                     	;# 
   516  0097                     	;# 
   517  0098                     	;# 
   518  0099                     	;# 
   519  009A                     	;# 
   520  009B                     	;# 
   521  009C                     	;# 
   522  009D                     	;# 
   523  009E                     	;# 
   524  009F                     	;# 
   525  0105                     	;# 
   526  0107                     	;# 
   527  0108                     	;# 
   528  0109                     	;# 
   529  010C                     	;# 
   530  010C                     	;# 
   531  010D                     	;# 
   532  010E                     	;# 
   533  010F                     	;# 
   534  0185                     	;# 
   535  0187                     	;# 
   536  0188                     	;# 
   537  0189                     	;# 
   538  018C                     	;# 
   539  018D                     	;# 
   540  0000                     	;# 
   541  0001                     	;# 
   542  0002                     	;# 
   543  0003                     	;# 
   544  0004                     	;# 
   545  0005                     	;# 
   546  0006                     	;# 
   547  0007                     	;# 
   548  0008                     	;# 
   549  0009                     	;# 
   550  000A                     	;# 
   551  000B                     	;# 
   552  000C                     	;# 
   553  000D                     	;# 
   554  000E                     	;# 
   555  000E                     	;# 
   556  000F                     	;# 
   557  0010                     	;# 
   558  0011                     	;# 
   559  0012                     	;# 
   560  0013                     	;# 
   561  0014                     	;# 
   562  0015                     	;# 
   563  0015                     	;# 
   564  0016                     	;# 
   565  0017                     	;# 
   566  0018                     	;# 
   567  0019                     	;# 
   568  001A                     	;# 
   569  001B                     	;# 
   570  001B                     	;# 
   571  001C                     	;# 
   572  001D                     	;# 
   573  001E                     	;# 
   574  001F                     	;# 
   575  0081                     	;# 
   576  0085                     	;# 
   577  0086                     	;# 
   578  0087                     	;# 
   579  0088                     	;# 
   580  0089                     	;# 
   581  008C                     	;# 
   582  008D                     	;# 
   583  008E                     	;# 
   584  008F                     	;# 
   585  0090                     	;# 
   586  0091                     	;# 
   587  0092                     	;# 
   588  0093                     	;# 
   589  0093                     	;# 
   590  0093                     	;# 
   591  0094                     	;# 
   592  0095                     	;# 
   593  0096                     	;# 
   594  0097                     	;# 
   595  0098                     	;# 
   596  0099                     	;# 
   597  009A                     	;# 
   598  009B                     	;# 
   599  009C                     	;# 
   600  009D                     	;# 
   601  009E                     	;# 
   602  009F                     	;# 
   603  0105                     	;# 
   604  0107                     	;# 
   605  0108                     	;# 
   606  0109                     	;# 
   607  010C                     	;# 
   608  010C                     	;# 
   609  010D                     	;# 
   610  010E                     	;# 
   611  010F                     	;# 
   612  0185                     	;# 
   613  0187                     	;# 
   614  0188                     	;# 
   615  0189                     	;# 
   616  018C                     	;# 
   617  018D                     	;# 
   618                           
   619                           	psect	idataBANK0
   620  0244                     __pidataBANK0:	
   621                           
   622                           ;initializer for checktecla@F1330
   623  0244  3420               	retlw	32
   624  0245  3420               	retlw	32
   625  0246  3420               	retlw	32
   626  0247  3420               	retlw	32
   627  0248  3420               	retlw	32
   628  0249  3420               	retlw	32
   629  024A  345B               	retlw	91
   630  024B  3420               	retlw	32
   631  024C  3420               	retlw	32
   632  024D  345D               	retlw	93
   633  024E  3420               	retlw	32
   634  024F  3420               	retlw	32
   635  0250  3420               	retlw	32
   636  0251  3420               	retlw	32
   637  0252  3420               	retlw	32
   638  0253  3420               	retlw	32
   639  0254  3400               	retlw	0
   640                           
   641                           	psect	strings
   642  0003                     __pstrings:	
   643  0003                     stringtab:	
   644  0003                     __stringtab:	
   645                           
   646                           ;	String table - string pointers are 1 byte each
   647  0003  1BFF               	btfsc	btemp+1,7
   648  0004  280D               	ljmp	stringcode
   649  0005  1383               	bcf	3,7
   650  0006  187F               	btfsc	btemp+1,0
   651  0007  1783               	bsf	3,7
   652  0008  0800               	movf	0,w
   653  0009  0A84               	incf	4,f
   654  000A  1903               	skipnz
   655  000B  0AFF               	incf	btemp+1,f
   656  000C  0008               	return
   657  000D                     stringcode:	
   658  000D                     stringdir:	
   659  000D  3000               	movlw	high stringdir
   660  000E  008A               	movwf	10
   661  000F  0804               	movf	4,w
   662  0010  0A84               	incf	4,f
   663  0011  0782               	addwf	2,f
   664  0012                     __stringbase:	
   665  0012  3400               	retlw	0
   666  0013                     __end_of__stringtab:	
   667  0013                     _keyboardMatrix:	
   668  0013  3431               	retlw	49
   669  0014  3432               	retlw	50
   670  0015  3433               	retlw	51
   671  0016  3441               	retlw	65
   672  0017  3434               	retlw	52
   673  0018  3435               	retlw	53
   674  0019  3436               	retlw	54
   675  001A  3442               	retlw	66
   676  001B  3437               	retlw	55
   677  001C  3438               	retlw	56
   678  001D  3439               	retlw	57
   679  001E  3443               	retlw	67
   680  001F  342A               	retlw	42
   681  0020  3430               	retlw	48
   682  0021  3423               	retlw	35
   683  0022  3444               	retlw	68
   684  0023                     __end_of_keyboardMatrix:	
   685  0023                     _indicePassos:	
   686  0023  3400               	retlw	0
   687  0024  3403               	retlw	3
   688  0025  3407               	retlw	7
   689  0026  340B               	retlw	11
   690  0027  340E               	retlw	14
   691  0028                     __end_of_indicePassos:	
   692  0028                     _indPassosSize:	
   693  0028  3405               	retlw	5
   694  0029                     __end_of_indPassosSize:	
   695  0005                     _SERIALIO	set	5
   696  0005                     _PORTAbits	set	5
   697  0008                     _LCD	set	8
   698  0006                     _PORTB	set	6
   699  0006                     _KEYBOARDbits	set	6
   700  0085                     _TRISAbits	set	133
   701  0088                     _TRISD	set	136
   702  0081                     _OPTION_REGbits	set	129
   703  0095                     _WPUB	set	149
   704  0086                     _TRISB	set	134
   705  0188                     _ANSELbits	set	392
   706  0189                     _ANSELH	set	393
   707  0029                     STR_3:	
   708  0029  3449               	retlw	73	;'I'
   709  002A  344E               	retlw	78	;'N'
   710  002B  3453               	retlw	83	;'S'
   711  002C  3449               	retlw	73	;'I'
   712  002D  3452               	retlw	82	;'R'
   713  002E  3441               	retlw	65	;'A'
   714  002F  3420               	retlw	32	;' '
   715  0030  3441               	retlw	65	;'A'
   716  0031  3420               	retlw	32	;' '
   717  0032  3453               	retlw	83	;'S'
   718  0033  3445               	retlw	69	;'E'
   719  0034  3451               	retlw	81	;'Q'
   720  0035  3455               	retlw	85	;'U'
   721  0036  3445               	retlw	69	;'E'
   722  0037  344E               	retlw	78	;'N'
   723  0038  342E               	retlw	46	;'.'
   724  0039  3400               	retlw	0
   725  003A                     STR_1:	
   726  003A  3453               	retlw	83	;'S'
   727  003B  3445               	retlw	69	;'E'
   728  003C  3451               	retlw	81	;'Q'
   729  003D  3455               	retlw	85	;'U'
   730  003E  3445               	retlw	69	;'E'
   731  003F  344E               	retlw	78	;'N'
   732  0040  3443               	retlw	67	;'C'
   733  0041  3449               	retlw	73	;'I'
   734  0042  3441               	retlw	65	;'A'
   735  0043  3444               	retlw	68	;'D'
   736  0044  344F               	retlw	79	;'O'
   737  0045  3452               	retlw	82	;'R'
   738  0046  3400               	retlw	0
   739  0047                     STR_2:	
   740  0047  3450               	retlw	80	;'P'
   741  0048  3452               	retlw	82	;'R'
   742  0049  344F               	retlw	79	;'O'
   743  004A  3447               	retlw	71	;'G'
   744  004B  3452               	retlw	82	;'R'
   745  004C  3441               	retlw	65	;'A'
   746  004D  344D               	retlw	77	;'M'
   747  004E  3441               	retlw	65	;'A'
   748  004F  3456               	retlw	86	;'V'
   749  0050  3445               	retlw	69	;'E'
   750  0051  344C               	retlw	76	;'L'
   751  0052  3400               	retlw	0
   752                           
   753                           ; #config settings
   754  0000                     
   755                           	psect	cinit
   756  07E7                     start_initialization:	
   757  07E7                     __initialization:	
   758                           
   759                           ; Initialize objects allocated to BANK0
   760  07E7  1383               	bcf	3,7	;select IRP bank0
   761  07E8  3047               	movlw	low (__pdataBANK0+17)
   762  07E9  00FD               	movwf	btemp+-1
   763  07EA  3002               	movlw	high __pidataBANK0
   764  07EB  00FE               	movwf	btemp
   765  07EC  3044               	movlw	low __pidataBANK0
   766  07ED  00FF               	movwf	btemp+1
   767  07EE  3036               	movlw	low __pdataBANK0
   768  07EF  0084               	movwf	4
   769  07F0  120A  118A  2237  120A  118A  	fcall	init_ram0
   770                           
   771                           ; Clear objects allocated to BANK0
   772  07F5  3020               	movlw	low __pbssBANK0
   773  07F6  0084               	movwf	4
   774  07F7  3036               	movlw	low (__pbssBANK0+22)
   775  07F8  120A  118A  220A   	fcall	clear_ram0
   776                           
   777                           ; Clear objects allocated to COMMON
   778  07FB  01FD               	clrf	__pbssCOMMON& (0+127)
   779  07FC                     end_of_initialization:	
   780                           ;End of C runtime variable initialization code
   781                           
   782  07FC                     __end_of__initialization:	
   783  07FC  0183               	clrf	3
   784  07FD  120A  118A  2CDA   	ljmp	_main	;jump to C main() function
   785                           
   786                           	psect	bssCOMMON
   787  007D                     __pbssCOMMON:	
   788  007D                     _fifoHead:	
   789  007D                     	ds	1
   790                           
   791                           	psect	bssBANK0
   792  0020                     __pbssBANK0:	
   793  0020                     _lenSerialIO:	
   794  0020                     	ds	1
   795  0021                     _ptrSerialOut:	
   796  0021                     	ds	1
   797  0022                     _ptrSerialIn:	
   798  0022                     	ds	1
   799  0023                     _currKey:	
   800  0023                     	ds	1
   801  0024                     _prevKey:	
   802  0024                     	ds	1
   803  0025                     _fifoTail:	
   804  0025                     	ds	1
   805  0026                     _fifo:	
   806  0026                     	ds	16
   807                           
   808                           	psect	dataBANK0
   809  0036                     __pdataBANK0:	
   810  0036                     checktecla@F1330:	
   811  0036                     	ds	17
   812                           
   813                           	psect	inittext
   814  0233                     init_fetch0:	
   815                           ;	Called with low address in FSR and high address in W
   816                           
   817  0233  087E               	movf	126,w
   818  0234  008A               	movwf	10
   819  0235  087F               	movf	127,w
   820  0236  0082               	movwf	2
   821  0237                     init_ram0:	
   822                           ;Called with:
   823                           ;	high address of idata address in btemp 
   824                           ;	low address of idata address in btemp+1 
   825                           ;	low address of data in FSR
   826                           ;	high address + 1 of data in btemp-1
   827                           
   828  0237  2233  120A  118A   	fcall	init_fetch0
   829  023A  0080               	movwf	0
   830  023B  0A84               	incf	4,f
   831  023C  0804               	movf	4,w
   832  023D  067D               	xorwf	125,w
   833  023E  1903               	btfsc	3,2
   834  023F  3400               	retlw	0
   835  0240  0AFF               	incf	127,f
   836  0241  1903               	btfsc	3,2
   837  0242  0AFE               	incf	126,f
   838  0243  2A37               	goto	init_ram0
   839                           
   840                           	psect	clrtext
   841  020A                     clear_ram0:	
   842                           ;	Called with FSR containing the base address, and
   843                           ;	W with the last address+1
   844                           
   845  020A  0064               	clrwdt	;clear the watchdog before getting into this loop
   846  020B                     clrloop0:	
   847  020B  0180               	clrf	0	;clear RAM location pointed to by FSR
   848  020C  0A84               	incf	4,f	;increment pointer
   849  020D  0604               	xorwf	4,w	;XOR with final address
   850  020E  1903               	btfsc	3,2	;have we reached the end yet?
   851  020F  3400               	retlw	0	;all done for this memory range, return
   852  0210  0604               	xorwf	4,w	;XOR again to restore value
   853  0211  2A0B               	goto	clrloop0	;do the next byte
   854                           
   855                           	psect	cstackCOMMON
   856  0070                     __pcstackCOMMON:	
   857  0070                     ?_displayFIFO:	
   858  0070                     ??_displayFIFO:	
   859                           ; 1 bytes @ 0x0
   860                           
   861  0070                     ?_cmdLCD:	
   862                           ; 1 bytes @ 0x0
   863                           
   864  0070                     ??_cmdLCD:	
   865                           ; 1 bytes @ 0x0
   866                           
   867  0070                     ?_initSerialIO:	
   868                           ; 1 bytes @ 0x0
   869                           
   870  0070                     ?_serialIOscan:	
   871                           ; 1 bytes @ 0x0
   872                           
   873  0070                     ?_putFIFO:	
   874                           ; 1 bytes @ 0x0
   875                           
   876  0070                     ??_putFIFO:	
   877                           ; 1 bytes @ 0x0
   878                           
   879  0070                     ?_getFIFO:	
   880                           ; 1 bytes @ 0x0
   881                           
   882  0070                     ??_getFIFO:	
   883                           ; 1 bytes @ 0x0
   884                           
   885  0070                     ?_delFIFO:	
   886                           ; 1 bytes @ 0x0
   887                           
   888  0070                     ??_delFIFO:	
   889                           ; 1 bytes @ 0x0
   890                           
   891  0070                     ?_resetFIFO:	
   892                           ; 1 bytes @ 0x0
   893                           
   894  0070                     ?_previousKey:	
   895                           ; 1 bytes @ 0x0
   896                           
   897  0070                     ??_previousKey:	
   898                           ; 1 bytes @ 0x0
   899                           
   900  0070                     ?_currentKey:	
   901                           ; 1 bytes @ 0x0
   902                           
   903  0070                     ??_currentKey:	
   904                           ; 1 bytes @ 0x0
   905                           
   906  0070                     ?_keyboardScan:	
   907                           ; 1 bytes @ 0x0
   908                           
   909  0070                     ??_keyboardScan:	
   910                           ; 1 bytes @ 0x0
   911                           
   912  0070                     ?_initKeyboard:	
   913                           ; 1 bytes @ 0x0
   914                           
   915  0070                     ??_initKeyboard:	
   916                           ; 1 bytes @ 0x0
   917                           
   918  0070                     ?_initLCD:	
   919                           ; 1 bytes @ 0x0
   920                           
   921  0070                     ?_putLCD:	
   922                           ; 1 bytes @ 0x0
   923                           
   924  0070                     ??_putLCD:	
   925                           ; 1 bytes @ 0x0
   926                           
   927  0070                     ?_clearLCD:	
   928                           ; 1 bytes @ 0x0
   929                           
   930  0070                     ?_screen_car:	
   931                           ; 1 bytes @ 0x0
   932                           
   933  0070                     ?_screen_menu:	
   934                           ; 1 bytes @ 0x0
   935                           
   936  0070                     ?_main:	
   937                           ; 1 bytes @ 0x0
   938                           
   939  0070                     ?_serialIOload:	
   940                           ; 1 bytes @ 0x0
   941                           
   942  0070                     ??_serialIOload:	
   943                           ; 1 bytes @ 0x0
   944                           
   945  0070                     ?_serialIObyteShift:	
   946                           ; 1 bytes @ 0x0
   947                           
   948  0070                     ??_serialIObyteShift:	
   949                           ; 1 bytes @ 0x0
   950                           
   951  0070                     initSerialIO@ptrOut:	
   952                           ; 1 bytes @ 0x0
   953                           
   954                           
   955                           ; 1 bytes @ 0x0
   956  0070                     	ds	1
   957  0071                     putFIFO@c:	
   958  0071                     getFIFO@aux:	
   959                           ; 1 bytes @ 0x1
   960                           
   961  0071                     delFIFO@n:	
   962                           ; 1 bytes @ 0x1
   963                           
   964  0071                     serialIObyteShift@dataIn:	
   965                           ; 1 bytes @ 0x1
   966                           
   967  0071                     initSerialIO@length:	
   968                           ; 1 bytes @ 0x1
   969                           
   970                           
   971                           ; 1 bytes @ 0x1
   972  0071                     	ds	1
   973  0072                     ??_initSerialIO:	
   974  0072                     delFIFO@ret:	
   975                           ; 1 bytes @ 0x2
   976                           
   977  0072                     cmdLCD@cmd:	
   978                           ; 1 bytes @ 0x2
   979                           
   980  0072                     putLCD@c:	
   981                           ; 1 bytes @ 0x2
   982                           
   983  0072                     serialIObyteShift@dataOut:	
   984                           ; 1 bytes @ 0x2
   985                           
   986                           
   987                           ; 1 bytes @ 0x2
   988  0072                     	ds	1
   989  0073                     ??_resetFIFO:	
   990  0073                     cmdLCD@nibble:	
   991                           ; 1 bytes @ 0x3
   992                           
   993  0073                     putLCD@nibble:	
   994                           ; 1 bytes @ 0x3
   995                           
   996  0073                     serialIObyteShift@dataBit:	
   997                           ; 1 bytes @ 0x3
   998                           
   999  0073                     initSerialIO@ptrIn:	
  1000                           ; 1 bytes @ 0x3
  1001                           
  1002                           
  1003                           ; 1 bytes @ 0x3
  1004  0073                     	ds	1
  1005  0074                     ??_serialIOscan:	
  1006  0074                     ??_initLCD:	
  1007                           ; 1 bytes @ 0x4
  1008                           
  1009  0074                     ?_gotoxy:	
  1010                           ; 1 bytes @ 0x4
  1011                           
  1012  0074                     ??_clearLCD:	
  1013                           ; 1 bytes @ 0x4
  1014                           
  1015  0074                     gotoxy@y:	
  1016                           ; 1 bytes @ 0x4
  1017                           
  1018                           
  1019                           ; 1 bytes @ 0x4
  1020  0074                     	ds	1
  1021  0075                     ??_gotoxy:	
  1022                           
  1023                           ; 1 bytes @ 0x5
  1024  0075                     	ds	2
  1025  0077                     gotoxy@x:	
  1026                           
  1027                           ; 1 bytes @ 0x7
  1028  0077                     	ds	1
  1029  0078                     ?_writeLCD:	
  1030  0078                     keyboardScan@aux:	
  1031                           ; 1 bytes @ 0x8
  1032                           
  1033  0078                     writeLCD@y:	
  1034                           ; 1 bytes @ 0x8
  1035                           
  1036  0078                     serialIOscan@j:	
  1037                           ; 1 bytes @ 0x8
  1038                           
  1039                           
  1040                           ; 1 bytes @ 0x8
  1041  0078                     	ds	1
  1042  0079                     keyboardScan@i:	
  1043  0079                     serialIOscan@i:	
  1044                           ; 1 bytes @ 0x9
  1045                           
  1046  0079                     writeLCD@ptr:	
  1047                           ; 1 bytes @ 0x9
  1048                           
  1049                           
  1050                           ; 2 bytes @ 0x9
  1051  0079                     	ds	1
  1052  007A                     keyboardScan@j:	
  1053                           
  1054                           ; 1 bytes @ 0xA
  1055  007A                     	ds	1
  1056  007B                     ??_writeLCD:	
  1057                           
  1058                           ; 1 bytes @ 0xB
  1059  007B                     	ds	1
  1060  007C                     writeLCD@x:	
  1061                           
  1062                           ; 1 bytes @ 0xC
  1063  007C                     	ds	1
  1064  007D                     ??_screen_menu:	
  1065                           
  1066                           	psect	cstackBANK0
  1067  0047                     __pcstackBANK0:	
  1068                           ; 1 bytes @ 0xD
  1069                           
  1070  0047                     ??_screen_car:	
  1071                           
  1072                           ; 1 bytes @ 0x0
  1073  0047                     	ds	3
  1074  004A                     ??_main:	
  1075                           
  1076                           ; 1 bytes @ 0x3
  1077  004A                     	ds	3
  1078  004D                     main@a:	
  1079                           
  1080                           ; 1 bytes @ 0x6
  1081  004D                     	ds	1
  1082  004E                     main@b:	
  1083                           
  1084                           ; 1 bytes @ 0x7
  1085  004E                     	ds	1
  1086  004F                     main@c:	
  1087                           
  1088                           ; 1 bytes @ 0x8
  1089  004F                     	ds	1
  1090  0050                     main@d:	
  1091                           
  1092                           ; 1 bytes @ 0x9
  1093  0050                     	ds	1
  1094  0051                     main@atuador:	
  1095                           
  1096                           ; 1 bytes @ 0xA
  1097  0051                     	ds	1
  1098  0052                     main@sensor:	
  1099                           
  1100                           ; 1 bytes @ 0xB
  1101  0052                     	ds	1
  1102  0053                     main@tecla:	
  1103                           
  1104                           ; 1 bytes @ 0xC
  1105  0053                     	ds	1
  1106  0054                     main@estado:	
  1107                           
  1108                           ; 2 bytes @ 0xD
  1109  0054                     	ds	2
  1110  0056                     main@rest:	
  1111                           
  1112                           ; 1 bytes @ 0xF
  1113  0056                     	ds	1
  1114                           
  1115                           	psect	maintext
  1116  04DA                     __pmaintext:	
  1117 ;;
  1118 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1119 ;;
  1120 ;; *************** function _main *****************
  1121 ;; Defined at:
  1122 ;;		line 48 in file "main.c"
  1123 ;; Parameters:    Size  Location     Type
  1124 ;;		None
  1125 ;; Auto vars:     Size  Location     Type
  1126 ;;  estado          2   13[BANK0 ] int 
  1127 ;;  rest            1   15[BANK0 ] unsigned char 
  1128 ;;  tecla           1   12[BANK0 ] unsigned char 
  1129 ;;  sensor          1   11[BANK0 ] struct .
  1130 ;;  atuador         1   10[BANK0 ] struct .
  1131 ;;  d               1    9[BANK0 ] unsigned char 
  1132 ;;  c               1    8[BANK0 ] unsigned char 
  1133 ;;  b               1    7[BANK0 ] unsigned char 
  1134 ;;  a               1    6[BANK0 ] unsigned char 
  1135 ;; Return value:  Size  Location     Type
  1136 ;;                  1    wreg      void 
  1137 ;; Registers used:
  1138 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1139 ;; Tracked objects:
  1140 ;;		On entry : B00/0
  1141 ;;		On exit  : 0/0
  1142 ;;		Unchanged: 0/0
  1143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1144 ;;      Params:         0       0       0       0       0
  1145 ;;      Locals:         0      10       0       0       0
  1146 ;;      Temps:          0       3       0       0       0
  1147 ;;      Totals:         0      13       0       0       0
  1148 ;;Total ram usage:       13 bytes
  1149 ;; Hardware stack levels required when called:    4
  1150 ;; This function calls:
  1151 ;;		_clearLCD
  1152 ;;		_currentKey
  1153 ;;		_delFIFO
  1154 ;;		_displayFIFO
  1155 ;;		_getFIFO
  1156 ;;		_initKeyboard
  1157 ;;		_initLCD
  1158 ;;		_initSerialIO
  1159 ;;		_keyboardScan
  1160 ;;		_previousKey
  1161 ;;		_putFIFO
  1162 ;;		_resetFIFO
  1163 ;;		_screen_car
  1164 ;;		_screen_menu
  1165 ;;		_serialIOscan
  1166 ;;		_writeLCD
  1167 ;; This function is called by:
  1168 ;;		Startup code after reset
  1169 ;; This function uses a non-reentrant model
  1170 ;;
  1171                           
  1172                           
  1173                           ;psect for function _main
  1174  04DA                     _main:	
  1175                           
  1176                           ;main.c: 51:     unsigned char a,b,c,d = 0;
  1177                           
  1178                           ;incstack = 0
  1179                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1180  04DA  1283               	bcf	3,5	;RP0=0, select bank0
  1181  04DB  1303               	bcf	3,6	;RP1=0, select bank0
  1182  04DC  01D0               	clrf	main@d
  1183                           
  1184                           ;main.c: 52:     unsigned char rest = 0;
  1185  04DD  01D6               	clrf	main@rest
  1186                           
  1187                           ;main.c: 53:     SENSORESbits_t sensor;;main.c: 54:     ATUADORESbits_t atuador;;main.c:
      +                           55:     int estado = 0;
  1188  04DE  01D4               	clrf	main@estado
  1189  04DF  01D5               	clrf	main@estado+1
  1190                           
  1191                           ;main.c: 56:     initLCD();
  1192  04E0  120A  118A  23E5  120A  118A  	fcall	_initLCD
  1193                           
  1194                           ;main.c: 57:     screen_car();
  1195  04E5  120A  118A  23AD  120A  118A  	fcall	_screen_car
  1196                           
  1197                           ;main.c: 58:     initKeyboard();
  1198  04EA  120A  118A  2255  120A  118A  	fcall	_initKeyboard
  1199                           
  1200                           ;main.c: 59:     initSerialIO( &sensor, &atuador, 1 );
  1201  04EF  3051               	movlw	(low (main@atuador| 0))& (0+255)
  1202  04F0  1283               	bcf	3,5	;RP0=0, select bank0
  1203  04F1  1303               	bcf	3,6	;RP1=0, select bank0
  1204  04F2  00CA               	movwf	??_main
  1205  04F3  084A               	movf	??_main,w
  1206  04F4  00F0               	movwf	initSerialIO@ptrOut
  1207  04F5  01F1               	clrf	initSerialIO@length
  1208  04F6  0AF1               	incf	initSerialIO@length,f
  1209  04F7  3052               	movlw	(low (main@sensor| 0))& (0+255)
  1210  04F8  120A  118A  230E  120A  118A  	fcall	_initSerialIO
  1211                           
  1212                           ;main.c: 60:     atuador.ABCD = 0x00;
  1213  04FD  1283               	bcf	3,5	;RP0=0, select bank0
  1214  04FE  1303               	bcf	3,6	;RP1=0, select bank0
  1215  04FF  01D1               	clrf	main@atuador
  1216  0500                     l1903:	
  1217                           
  1218                           ;main.c: 73:     {;main.c: 78:         keyboardScan();
  1219  0500  120A  118A  2474  120A  118A  	fcall	_keyboardScan
  1220                           
  1221                           ;main.c: 79:         screen_menu ();
  1222  0505  120A  118A  221B  120A  118A  	fcall	_screen_menu
  1223                           
  1224                           ;main.c: 80:         switch( estado )
  1225  050A  2E49               	goto	l2047
  1226  050B                     l1907:	
  1227                           
  1228                           ;main.c: 85:                     rest = getFIFO();
  1229  050B  120A  118A  22BA  120A  118A  	fcall	_getFIFO
  1230  0510  1283               	bcf	3,5	;RP0=0, select bank0
  1231  0511  1303               	bcf	3,6	;RP1=0, select bank0
  1232  0512  00CA               	movwf	??_main
  1233  0513  084A               	movf	??_main,w
  1234  0514  00D6               	movwf	main@rest
  1235                           
  1236                           ;main.c: 86:                     if( rest == 'A' )
  1237  0515  3041               	movlw	65
  1238  0516  0656               	xorwf	main@rest,w
  1239  0517  1D03               	btfss	3,2
  1240  0518  2D1B               	goto	l1913
  1241                           
  1242                           ;main.c: 87:                         estado = 100;
  1243  0519  3064               	movlw	100
  1244  051A  2E3A               	goto	L51
  1245  051B                     l1913:	
  1246  051B  3042               	movlw	66
  1247  051C  0656               	xorwf	main@rest,w
  1248  051D  1D03               	btfss	3,2
  1249  051E  2D21               	goto	l1917
  1250                           
  1251                           ;main.c: 89:                         estado = 110;
  1252  051F  306E               	movlw	110
  1253  0520  2E3A               	goto	L51
  1254  0521                     l1917:	
  1255  0521  3043               	movlw	67
  1256  0522  0656               	xorwf	main@rest,w
  1257  0523  1D03               	btfss	3,2
  1258  0524  2D27               	goto	l1921
  1259                           
  1260                           ;main.c: 91:                         estado = 120;
  1261  0525  3078               	movlw	120
  1262  0526  2E3A               	goto	L51
  1263  0527                     l1921:	
  1264  0527  3044               	movlw	68
  1265  0528  0656               	xorwf	main@rest,w
  1266  0529  1D03               	btfss	3,2
  1267  052A  2D2D               	goto	l1925
  1268                           
  1269                           ;main.c: 93:                         estado = 130;
  1270  052B  3082               	movlw	130
  1271  052C  2E3A               	goto	L51
  1272  052D                     l1925:	
  1273  052D  3031               	movlw	49
  1274  052E  0656               	xorwf	main@rest,w
  1275  052F  1D03               	btfss	3,2
  1276  0530  2D33               	goto	l1929
  1277                           
  1278                           ;main.c: 95:                         estado = 140;
  1279  0531  308C               	movlw	140
  1280  0532  2E3A               	goto	L51
  1281  0533                     l1929:	
  1282  0533  3032               	movlw	50
  1283  0534  0656               	xorwf	main@rest,w
  1284  0535  1D03               	btfss	3,2
  1285  0536  2D39               	goto	l1933
  1286                           
  1287                           ;main.c: 97:                         estado = 150;
  1288  0537  3096               	movlw	150
  1289  0538  2E3A               	goto	L51
  1290  0539                     l1933:	
  1291  0539  3033               	movlw	51
  1292  053A  0656               	xorwf	main@rest,w
  1293  053B  1D03               	btfss	3,2
  1294  053C  2D3F               	goto	l1937
  1295                           
  1296                           ;main.c: 99:                         estado = 160;
  1297  053D  30A0               	movlw	160
  1298  053E  2E3A               	goto	L51
  1299  053F                     l1937:	
  1300  053F  3034               	movlw	52
  1301  0540  0656               	xorwf	main@rest,w
  1302  0541  1D03               	btfss	3,2
  1303  0542  2D45               	goto	l1941
  1304                           
  1305                           ;main.c: 101:                         estado = 170;
  1306  0543  30AA               	movlw	170
  1307  0544  2E3A               	goto	L51
  1308  0545                     l1941:	
  1309  0545  3035               	movlw	53
  1310  0546  0656               	xorwf	main@rest,w
  1311  0547  1D03               	btfss	3,2
  1312  0548  2D4B               	goto	l1945
  1313                           
  1314                           ;main.c: 103:                         estado = 180;
  1315  0549  30B4               	movlw	180
  1316  054A  2E3A               	goto	L51
  1317  054B                     l1945:	
  1318  054B  3036               	movlw	54
  1319  054C  0656               	xorwf	main@rest,w
  1320  054D  1D03               	btfss	3,2
  1321  054E  2D51               	goto	l1949
  1322                           
  1323                           ;main.c: 105:                         estado = 190;
  1324  054F  30BE               	movlw	190
  1325  0550  2E3A               	goto	L51
  1326  0551                     l1949:	
  1327  0551  3037               	movlw	55
  1328  0552  0656               	xorwf	main@rest,w
  1329  0553  1D03               	btfss	3,2
  1330  0554  2D57               	goto	l1953
  1331                           
  1332                           ;main.c: 107:                         estado = 200;
  1333  0555  30C8               	movlw	200
  1334  0556  2E3A               	goto	L51
  1335  0557                     l1953:	
  1336  0557  3038               	movlw	56
  1337  0558  0656               	xorwf	main@rest,w
  1338  0559  1D03               	btfss	3,2
  1339  055A  2D5D               	goto	l1957
  1340                           
  1341                           ;main.c: 109:                         estado = 210;
  1342  055B  30D2               	movlw	210
  1343  055C  2E3A               	goto	L51
  1344  055D                     l1957:	
  1345  055D  3039               	movlw	57
  1346  055E  0656               	xorwf	main@rest,w
  1347  055F  1D03               	btfss	3,2
  1348  0560  2D63               	goto	l1961
  1349                           
  1350                           ;main.c: 111:                         estado = 220;
  1351  0561  30DC               	movlw	220
  1352  0562  2E3A               	goto	L51
  1353  0563                     l1961:	
  1354  0563  3061               	movlw	97
  1355  0564  0656               	xorwf	main@rest,w
  1356  0565  1D03               	btfss	3,2
  1357  0566  2D69               	goto	l1965
  1358                           
  1359                           ;main.c: 113:                         estado = 230;
  1360  0567  30E6               	movlw	230
  1361  0568  2E3A               	goto	L51
  1362  0569                     l1965:	
  1363  0569  3062               	movlw	98
  1364  056A  0656               	xorwf	main@rest,w
  1365  056B  1D03               	btfss	3,2
  1366  056C  2D6F               	goto	l1969
  1367                           
  1368                           ;main.c: 115:                         estado = 240;
  1369  056D  30F0               	movlw	240
  1370  056E  2E3A               	goto	L51
  1371  056F                     l1969:	
  1372  056F  3063               	movlw	99
  1373  0570  0656               	xorwf	main@rest,w
  1374  0571  1D03               	btfss	3,2
  1375  0572  2D75               	goto	l1973
  1376                           
  1377                           ;main.c: 117:                         estado = 250;
  1378  0573  30FA               	movlw	250
  1379  0574  2E3A               	goto	L51
  1380  0575                     l1973:	
  1381  0575  3064               	movlw	100
  1382  0576  0656               	xorwf	main@rest,w
  1383  0577  1D03               	btfss	3,2
  1384  0578  2EC3               	goto	l2049
  1385                           
  1386                           ;main.c: 119:                         estado = 260;
  1387  0579  3004               	movlw	4
  1388  057A  2E42               	goto	L48
  1389  057B                     l215:	
  1390                           ;main.c: 121:             case 100:
  1391                           
  1392                           
  1393                           ;main.c: 122:                     atuador.A = 1;
  1394  057B  1451               	bsf	main@atuador,0
  1395                           
  1396                           ;main.c: 123:                     estado = 101;
  1397  057C  3065               	movlw	101
  1398  057D  2E3A               	goto	L51
  1399  057E                     l216:	
  1400                           ;main.c: 125:             case 101:
  1401                           
  1402                           ;main.c: 124:                     break;
  1403                           
  1404                           
  1405                           ;main.c: 126:                     if( sensor.A1 == 1)
  1406  057E  1CD2               	btfss	main@sensor,1
  1407  057F  2EC3               	goto	l2049
  1408  0580                     l1979:	
  1409                           
  1410                           ;main.c: 127:                         estado = 10;
  1411  0580  300A               	movlw	10
  1412  0581  2E3A               	goto	L51
  1413  0582                     l218:	
  1414                           ;main.c: 129:             case 110:
  1415                           
  1416                           
  1417                           ;main.c: 130:                     atuador.B = 1;
  1418  0582  14D1               	bsf	main@atuador,1
  1419                           
  1420                           ;main.c: 131:                     estado = 111;
  1421  0583  306F               	movlw	111
  1422  0584  2E3A               	goto	L51
  1423  0585                     l219:	
  1424                           ;main.c: 133:             case 111:
  1425                           
  1426                           ;main.c: 132:                     break;
  1427                           
  1428                           
  1429                           ;main.c: 134:                     if( sensor.B1 == 1)
  1430  0585  19D2               	btfsc	main@sensor,3
  1431  0586  2D80               	goto	l1979
  1432  0587  2EC3               	goto	l2049
  1433  0588                     l221:	
  1434                           ;main.c: 137:             case 120:
  1435                           
  1436                           
  1437                           ;main.c: 138:                     atuador.C = 1;
  1438  0588  1551               	bsf	main@atuador,2
  1439                           
  1440                           ;main.c: 139:                     estado = 121;
  1441  0589  3079               	movlw	121
  1442  058A  2E3A               	goto	L51
  1443  058B                     l222:	
  1444                           ;main.c: 141:             case 121:
  1445                           
  1446                           ;main.c: 140:                     break;
  1447                           
  1448                           
  1449                           ;main.c: 142:                     if( sensor.C1 == 1)
  1450  058B  1AD2               	btfsc	main@sensor,5
  1451  058C  2D80               	goto	l1979
  1452  058D  2EC3               	goto	l2049
  1453  058E                     l224:	
  1454                           ;main.c: 145:             case 130:
  1455                           
  1456                           
  1457                           ;main.c: 146:                     atuador.D = 1;
  1458  058E  15D1               	bsf	main@atuador,3
  1459                           
  1460                           ;main.c: 147:                     estado = 131;
  1461  058F  3083               	movlw	131
  1462  0590  2E3A               	goto	L51
  1463  0591                     l225:	
  1464                           ;main.c: 149:             case 131:
  1465                           
  1466                           ;main.c: 148:                     break;
  1467                           
  1468                           
  1469                           ;main.c: 150:                     if( sensor.D1 == 1)
  1470  0591  1BD2               	btfsc	main@sensor,7
  1471  0592  2D80               	goto	l1979
  1472  0593  2EC3               	goto	l2049
  1473  0594                     l1993:	
  1474                           
  1475                           ;main.c: 154:                     _delay((unsigned long)((1000)*(4000000/4000.0)));
  1476  0594  3006               	movlw	6
  1477  0595  1283               	bcf	3,5	;RP0=0, select bank0
  1478  0596  1303               	bcf	3,6	;RP1=0, select bank0
  1479  0597  00CC               	movwf	??_main+2
  1480  0598  3013               	movlw	19
  1481  0599  00CB               	movwf	??_main+1
  1482  059A  30AD               	movlw	173
  1483  059B  00CA               	movwf	??_main
  1484  059C                     u1177:	
  1485  059C  0BCA               	decfsz	??_main,f
  1486  059D  2D9C               	goto	u1177
  1487  059E  0BCB               	decfsz	??_main+1,f
  1488  059F  2D9C               	goto	u1177
  1489  05A0  0BCC               	decfsz	??_main+2,f
  1490  05A1  2D9C               	goto	u1177
  1491                           
  1492                           ;main.c: 155:                     estado = 141;
  1493  05A2  308D               	movlw	141
  1494  05A3  2E29               	goto	L59
  1495  05A4                     l1997:	
  1496                           ;main.c: 156:                     break;
  1497                           
  1498                           
  1499                           ;main.c: 161:                     _delay((unsigned long)((2000)*(4000000/4000.0)));
  1500  05A4  300B               	movlw	11
  1501  05A5  1283               	bcf	3,5	;RP0=0, select bank0
  1502  05A6  1303               	bcf	3,6	;RP1=0, select bank0
  1503  05A7  00CC               	movwf	??_main+2
  1504  05A8  3026               	movlw	38
  1505  05A9  00CB               	movwf	??_main+1
  1506  05AA  305D               	movlw	93
  1507  05AB  00CA               	movwf	??_main
  1508  05AC                     u1187:	
  1509  05AC  0BCA               	decfsz	??_main,f
  1510  05AD  2DAC               	goto	u1187
  1511  05AE  0BCB               	decfsz	??_main+1,f
  1512  05AF  2DAC               	goto	u1187
  1513  05B0  0BCC               	decfsz	??_main+2,f
  1514  05B1  2DAC               	goto	u1187
  1515                           
  1516                           ;main.c: 162:                     estado = 151;
  1517  05B2  3097               	movlw	151
  1518  05B3  2E29               	goto	L59
  1519  05B4                     l2001:	
  1520                           ;main.c: 163:                     break;
  1521                           
  1522                           
  1523                           ;main.c: 168:                     _delay((unsigned long)((3000)*(4000000/4000.0)));
  1524  05B4  3010               	movlw	16
  1525  05B5  1283               	bcf	3,5	;RP0=0, select bank0
  1526  05B6  1303               	bcf	3,6	;RP1=0, select bank0
  1527  05B7  00CC               	movwf	??_main+2
  1528  05B8  3039               	movlw	57
  1529  05B9  00CB               	movwf	??_main+1
  1530  05BA  300D               	movlw	13
  1531  05BB  00CA               	movwf	??_main
  1532  05BC                     u1197:	
  1533  05BC  0BCA               	decfsz	??_main,f
  1534  05BD  2DBC               	goto	u1197
  1535  05BE  0BCB               	decfsz	??_main+1,f
  1536  05BF  2DBC               	goto	u1197
  1537  05C0  0BCC               	decfsz	??_main+2,f
  1538  05C1  2DBC               	goto	u1197
  1539                           
  1540                           ;main.c: 169:                     estado = 161;
  1541  05C2  30A1               	movlw	161
  1542  05C3  2E29               	goto	L59
  1543  05C4                     l2005:	
  1544                           ;main.c: 170:                     break;
  1545                           
  1546                           
  1547                           ;main.c: 175:                     _delay((unsigned long)((4000)*(4000000/4000.0)));
  1548  05C4  3015               	movlw	21
  1549  05C5  1283               	bcf	3,5	;RP0=0, select bank0
  1550  05C6  1303               	bcf	3,6	;RP1=0, select bank0
  1551  05C7  00CC               	movwf	??_main+2
  1552  05C8  304B               	movlw	75
  1553  05C9  00CB               	movwf	??_main+1
  1554  05CA  30BD               	movlw	189
  1555  05CB  00CA               	movwf	??_main
  1556  05CC                     u1207:	
  1557  05CC  0BCA               	decfsz	??_main,f
  1558  05CD  2DCC               	goto	u1207
  1559  05CE  0BCB               	decfsz	??_main+1,f
  1560  05CF  2DCC               	goto	u1207
  1561  05D0  0BCC               	decfsz	??_main+2,f
  1562  05D1  2DCC               	goto	u1207
  1563  05D2  2DD3               	nop2
  1564                           
  1565                           ;main.c: 176:                     estado = 171;
  1566  05D3  30AB               	movlw	171
  1567  05D4  2E29               	goto	L59
  1568  05D5                     l2009:	
  1569                           ;main.c: 177:                     break;
  1570                           
  1571                           
  1572                           ;main.c: 182:                     _delay((unsigned long)((5000)*(4000000/4000.0)));
  1573  05D5  301A               	movlw	26
  1574  05D6  1283               	bcf	3,5	;RP0=0, select bank0
  1575  05D7  1303               	bcf	3,6	;RP1=0, select bank0
  1576  05D8  00CC               	movwf	??_main+2
  1577  05D9  305E               	movlw	94
  1578  05DA  00CB               	movwf	??_main+1
  1579  05DB  306D               	movlw	109
  1580  05DC  00CA               	movwf	??_main
  1581  05DD                     u1217:	
  1582  05DD  0BCA               	decfsz	??_main,f
  1583  05DE  2DDD               	goto	u1217
  1584  05DF  0BCB               	decfsz	??_main+1,f
  1585  05E0  2DDD               	goto	u1217
  1586  05E1  0BCC               	decfsz	??_main+2,f
  1587  05E2  2DDD               	goto	u1217
  1588  05E3  2DE4               	nop2
  1589                           
  1590                           ;main.c: 183:                     estado = 181;
  1591  05E4  30B5               	movlw	181
  1592  05E5  2E29               	goto	L59
  1593  05E6                     l2013:	
  1594                           ;main.c: 184:                     break;
  1595                           
  1596                           
  1597                           ;main.c: 189:                     _delay((unsigned long)((6000)*(4000000/4000.0)));
  1598  05E6  301F               	movlw	31
  1599  05E7  1283               	bcf	3,5	;RP0=0, select bank0
  1600  05E8  1303               	bcf	3,6	;RP1=0, select bank0
  1601  05E9  00CC               	movwf	??_main+2
  1602  05EA  3071               	movlw	113
  1603  05EB  00CB               	movwf	??_main+1
  1604  05EC  301D               	movlw	29
  1605  05ED  00CA               	movwf	??_main
  1606  05EE                     u1227:	
  1607  05EE  0BCA               	decfsz	??_main,f
  1608  05EF  2DEE               	goto	u1227
  1609  05F0  0BCB               	decfsz	??_main+1,f
  1610  05F1  2DEE               	goto	u1227
  1611  05F2  0BCC               	decfsz	??_main+2,f
  1612  05F3  2DEE               	goto	u1227
  1613  05F4  2DF5               	nop2
  1614                           
  1615                           ;main.c: 190:                     estado = 191;
  1616  05F5  30BF               	movlw	191
  1617  05F6  2E29               	goto	L59
  1618  05F7                     l2017:	
  1619                           ;main.c: 191:                     break;
  1620                           
  1621                           
  1622                           ;main.c: 196:                     _delay((unsigned long)((7000)*(4000000/4000.0)));
  1623  05F7  3024               	movlw	36
  1624  05F8  1283               	bcf	3,5	;RP0=0, select bank0
  1625  05F9  1303               	bcf	3,6	;RP1=0, select bank0
  1626  05FA  00CC               	movwf	??_main+2
  1627  05FB  3083               	movlw	131
  1628  05FC  00CB               	movwf	??_main+1
  1629  05FD  30CE               	movlw	206
  1630  05FE  00CA               	movwf	??_main
  1631  05FF                     u1237:	
  1632  05FF  0BCA               	decfsz	??_main,f
  1633  0600  2DFF               	goto	u1237
  1634  0601  0BCB               	decfsz	??_main+1,f
  1635  0602  2DFF               	goto	u1237
  1636  0603  0BCC               	decfsz	??_main+2,f
  1637  0604  2DFF               	goto	u1237
  1638  0605  0000               	nop
  1639                           
  1640                           ;main.c: 197:                     estado = 201;
  1641  0606  30C9               	movlw	201
  1642  0607  2E29               	goto	L59
  1643  0608                     l2021:	
  1644                           ;main.c: 198:                     break;
  1645                           
  1646                           
  1647                           ;main.c: 203:                     _delay((unsigned long)((8000)*(4000000/4000.0)));
  1648  0608  3029               	movlw	41
  1649  0609  1283               	bcf	3,5	;RP0=0, select bank0
  1650  060A  1303               	bcf	3,6	;RP1=0, select bank0
  1651  060B  00CC               	movwf	??_main+2
  1652  060C  3096               	movlw	150
  1653  060D  00CB               	movwf	??_main+1
  1654  060E  307E               	movlw	126
  1655  060F  00CA               	movwf	??_main
  1656  0610                     u1247:	
  1657  0610  0BCA               	decfsz	??_main,f
  1658  0611  2E10               	goto	u1247
  1659  0612  0BCB               	decfsz	??_main+1,f
  1660  0613  2E10               	goto	u1247
  1661  0614  0BCC               	decfsz	??_main+2,f
  1662  0615  2E10               	goto	u1247
  1663  0616  0000               	nop
  1664                           
  1665                           ;main.c: 204:                     estado = 211;
  1666  0617  30D3               	movlw	211
  1667  0618  2E29               	goto	L59
  1668  0619                     l2025:	
  1669                           ;main.c: 205:                     break;
  1670                           
  1671                           
  1672                           ;main.c: 210:                     _delay((unsigned long)((9000)*(4000000/4000.0)));
  1673  0619  302E               	movlw	46
  1674  061A  1283               	bcf	3,5	;RP0=0, select bank0
  1675  061B  1303               	bcf	3,6	;RP1=0, select bank0
  1676  061C  00CC               	movwf	??_main+2
  1677  061D  30A9               	movlw	169
  1678  061E  00CB               	movwf	??_main+1
  1679  061F  302E               	movlw	46
  1680  0620  00CA               	movwf	??_main
  1681  0621                     u1257:	
  1682  0621  0BCA               	decfsz	??_main,f
  1683  0622  2E21               	goto	u1257
  1684  0623  0BCB               	decfsz	??_main+1,f
  1685  0624  2E21               	goto	u1257
  1686  0625  0BCC               	decfsz	??_main+2,f
  1687  0626  2E21               	goto	u1257
  1688  0627  0000               	nop
  1689                           
  1690                           ;main.c: 211:                     estado = 221;
  1691  0628  30DD               	movlw	221
  1692  0629                     L59:	
  1693  0629  1283               	bcf	3,5	;RP0=0, select bank0
  1694  062A  1303               	bcf	3,6	;RP1=0, select bank0
  1695  062B  2E3A               	goto	L51
  1696  062C                     l245:	
  1697                           ;main.c: 217:             case 230:
  1698                           
  1699                           ;main.c: 212:                     break;
  1700                           
  1701                           
  1702                           ;main.c: 218:                     atuador.A = 0;
  1703  062C  1051               	bcf	main@atuador,0
  1704                           
  1705                           ;main.c: 219:                     estado = 231;
  1706  062D  30E7               	movlw	231
  1707  062E  2E3A               	goto	L51
  1708  062F                     l246:	
  1709                           ;main.c: 221:             case 231:
  1710                           
  1711                           ;main.c: 220:                     break;
  1712                           
  1713                           
  1714                           ;main.c: 222:                     if( sensor.A0 == 1)
  1715  062F  1852               	btfsc	main@sensor,0
  1716  0630  2D80               	goto	l1979
  1717  0631  2EC3               	goto	l2049
  1718  0632                     l248:	
  1719                           ;main.c: 225:             case 240:
  1720                           
  1721                           
  1722                           ;main.c: 226:                     atuador.B = 0;
  1723  0632  10D1               	bcf	main@atuador,1
  1724                           
  1725                           ;main.c: 227:                     estado = 241;
  1726  0633  30F1               	movlw	241
  1727  0634  2E3A               	goto	L51
  1728  0635                     l249:	
  1729                           ;main.c: 229:             case 241:
  1730                           
  1731                           ;main.c: 228:                     break;
  1732                           
  1733                           
  1734                           ;main.c: 230:                     if( sensor.B0 == 1)
  1735  0635  1952               	btfsc	main@sensor,2
  1736  0636  2D80               	goto	l1979
  1737  0637  2EC3               	goto	l2049
  1738  0638                     l251:	
  1739                           ;main.c: 233:             case 250:
  1740                           
  1741                           
  1742                           ;main.c: 234:                     atuador.C = 0;
  1743  0638  1151               	bcf	main@atuador,2
  1744                           
  1745                           ;main.c: 235:                     estado = 251;
  1746  0639  30FB               	movlw	251
  1747  063A                     L51:	
  1748  063A  00D4               	movwf	main@estado
  1749  063B  3000               	movlw	0
  1750  063C  2E44               	goto	L34
  1751  063D                     l252:	
  1752                           ;main.c: 237:             case 251:
  1753                           
  1754                           ;main.c: 236:                     break;
  1755                           
  1756                           
  1757                           ;main.c: 238:                     if( sensor.C0 == 1)
  1758  063D  1A52               	btfsc	main@sensor,4
  1759  063E  2D80               	goto	l1979
  1760  063F  2EC3               	goto	l2049
  1761  0640                     l254:	
  1762                           ;main.c: 241:             case 260:
  1763                           
  1764                           
  1765                           ;main.c: 242:                     atuador.D = 0;
  1766  0640  11D1               	bcf	main@atuador,3
  1767                           
  1768                           ;main.c: 243:                     estado = 261;
  1769  0641  3005               	movlw	5
  1770  0642                     L48:	
  1771  0642  00D4               	movwf	main@estado
  1772  0643  3001               	movlw	1
  1773  0644                     L34:	
  1774  0644  00D5               	movwf	main@estado+1
  1775                           
  1776                           ;main.c: 244:                     break;
  1777  0645  2EC3               	goto	l2049
  1778  0646                     l255:	
  1779                           ;main.c: 245:             case 261:
  1780                           
  1781                           
  1782                           ;main.c: 246:                     if( sensor.D0 == 1)
  1783  0646  1B52               	btfsc	main@sensor,6
  1784  0647  2D80               	goto	l1979
  1785  0648  2EC3               	goto	l2049
  1786  0649                     l2047:	
  1787                           
  1788                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  1789                           ; Switch size 1, requested type "simple"
  1790                           ; Number of cases is 2, Range of values is 0 to 1
  1791                           ; switch strategies available:
  1792                           ; Name         Instructions Cycles
  1793                           ; simple_byte            7     4 (average)
  1794                           ; direct_byte           14     8 (fixed)
  1795                           ; jumptable            260     6 (fixed)
  1796                           ;	Chosen strategy is simple_byte
  1797  0649  1283               	bcf	3,5	;RP0=0, select bank0
  1798  064A  1303               	bcf	3,6	;RP1=0, select bank0
  1799  064B  0855               	movf	main@estado+1,w
  1800  064C  3A00               	xorlw	0	; case 0
  1801  064D  1903               	skipnz
  1802  064E  2E53               	goto	l2267
  1803  064F  3A01               	xorlw	1	; case 1
  1804  0650  1903               	skipnz
  1805  0651  2EBB               	goto	l2269
  1806  0652  2EC3               	goto	l2049
  1807  0653                     l2267:	
  1808                           
  1809                           ; Switch size 1, requested type "simple"
  1810                           ; Number of cases is 34, Range of values is 0 to 251
  1811                           ; switch strategies available:
  1812                           ; Name         Instructions Cycles
  1813                           ; simple_byte          103    52 (average)
  1814                           ; jumptable            260     6 (fixed)
  1815                           ;	Chosen strategy is simple_byte
  1816  0653  0854               	movf	main@estado,w
  1817  0654  3A00               	xorlw	0	; case 0
  1818  0655  1903               	skipnz
  1819  0656  2EC3               	goto	l2049
  1820  0657  3A0A               	xorlw	10	; case 10
  1821  0658  1903               	skipnz
  1822  0659  2D0B               	goto	l1907
  1823  065A  3A6E               	xorlw	110	; case 100
  1824  065B  1903               	skipnz
  1825  065C  2D7B               	goto	l215
  1826  065D  3A01               	xorlw	1	; case 101
  1827  065E  1903               	skipnz
  1828  065F  2D7E               	goto	l216
  1829  0660  3A0B               	xorlw	11	; case 110
  1830  0661  1903               	skipnz
  1831  0662  2D82               	goto	l218
  1832  0663  3A01               	xorlw	1	; case 111
  1833  0664  1903               	skipnz
  1834  0665  2D85               	goto	l219
  1835  0666  3A17               	xorlw	23	; case 120
  1836  0667  1903               	skipnz
  1837  0668  2D88               	goto	l221
  1838  0669  3A01               	xorlw	1	; case 121
  1839  066A  1903               	skipnz
  1840  066B  2D8B               	goto	l222
  1841  066C  3AFB               	xorlw	251	; case 130
  1842  066D  1903               	skipnz
  1843  066E  2D8E               	goto	l224
  1844  066F  3A01               	xorlw	1	; case 131
  1845  0670  1903               	skipnz
  1846  0671  2D91               	goto	l225
  1847  0672  3A0F               	xorlw	15	; case 140
  1848  0673  1903               	skipnz
  1849  0674  2D94               	goto	l1993
  1850  0675  3A01               	xorlw	1	; case 141
  1851  0676  1903               	skipnz
  1852  0677  2D80               	goto	l1979
  1853  0678  3A1B               	xorlw	27	; case 150
  1854  0679  1903               	skipnz
  1855  067A  2DA4               	goto	l1997
  1856  067B  3A01               	xorlw	1	; case 151
  1857  067C  1903               	skipnz
  1858  067D  2D80               	goto	l1979
  1859  067E  3A37               	xorlw	55	; case 160
  1860  067F  1903               	skipnz
  1861  0680  2DB4               	goto	l2001
  1862  0681  3A01               	xorlw	1	; case 161
  1863  0682  1903               	skipnz
  1864  0683  2D80               	goto	l1979
  1865  0684  3A0B               	xorlw	11	; case 170
  1866  0685  1903               	skipnz
  1867  0686  2DC4               	goto	l2005
  1868  0687  3A01               	xorlw	1	; case 171
  1869  0688  1903               	skipnz
  1870  0689  2D80               	goto	l1979
  1871  068A  3A1F               	xorlw	31	; case 180
  1872  068B  1903               	skipnz
  1873  068C  2DD5               	goto	l2009
  1874  068D  3A01               	xorlw	1	; case 181
  1875  068E  1903               	skipnz
  1876  068F  2D80               	goto	l1979
  1877  0690  3A0B               	xorlw	11	; case 190
  1878  0691  1903               	skipnz
  1879  0692  2DE6               	goto	l2013
  1880  0693  3A01               	xorlw	1	; case 191
  1881  0694  1903               	skipnz
  1882  0695  2D80               	goto	l1979
  1883  0696  3A77               	xorlw	119	; case 200
  1884  0697  1903               	skipnz
  1885  0698  2DF7               	goto	l2017
  1886  0699  3A01               	xorlw	1	; case 201
  1887  069A  1903               	skipnz
  1888  069B  2D80               	goto	l1979
  1889  069C  3A1B               	xorlw	27	; case 210
  1890  069D  1903               	skipnz
  1891  069E  2E08               	goto	l2021
  1892  069F  3A01               	xorlw	1	; case 211
  1893  06A0  1903               	skipnz
  1894  06A1  2D80               	goto	l1979
  1895  06A2  3A0F               	xorlw	15	; case 220
  1896  06A3  1903               	skipnz
  1897  06A4  2E19               	goto	l2025
  1898  06A5  3A01               	xorlw	1	; case 221
  1899  06A6  1903               	skipnz
  1900  06A7  2D80               	goto	l1979
  1901  06A8  3A3B               	xorlw	59	; case 230
  1902  06A9  1903               	skipnz
  1903  06AA  2E2C               	goto	l245
  1904  06AB  3A01               	xorlw	1	; case 231
  1905  06AC  1903               	skipnz
  1906  06AD  2E2F               	goto	l246
  1907  06AE  3A17               	xorlw	23	; case 240
  1908  06AF  1903               	skipnz
  1909  06B0  2E32               	goto	l248
  1910  06B1  3A01               	xorlw	1	; case 241
  1911  06B2  1903               	skipnz
  1912  06B3  2E35               	goto	l249
  1913  06B4  3A0B               	xorlw	11	; case 250
  1914  06B5  1903               	skipnz
  1915  06B6  2E38               	goto	l251
  1916  06B7  3A01               	xorlw	1	; case 251
  1917  06B8  1903               	skipnz
  1918  06B9  2E3D               	goto	l252
  1919  06BA  2EC3               	goto	l2049
  1920  06BB                     l2269:	
  1921                           
  1922                           ; Switch size 1, requested type "simple"
  1923                           ; Number of cases is 2, Range of values is 4 to 5
  1924                           ; switch strategies available:
  1925                           ; Name         Instructions Cycles
  1926                           ; simple_byte            7     4 (average)
  1927                           ; direct_byte           17    11 (fixed)
  1928                           ; jumptable            263     9 (fixed)
  1929                           ;	Chosen strategy is simple_byte
  1930  06BB  0854               	movf	main@estado,w
  1931  06BC  3A04               	xorlw	4	; case 4
  1932  06BD  1903               	skipnz
  1933  06BE  2E40               	goto	l254
  1934  06BF  3A01               	xorlw	1	; case 5
  1935  06C0  1903               	skipnz
  1936  06C1  2E46               	goto	l255
  1937  06C2  2EC3               	goto	l2049
  1938  06C3                     l2049:	
  1939                           
  1940                           ;main.c: 251:         if( currentKey() && !previousKey() )
  1941  06C3  120A  118A  21F8  120A  118A  	fcall	_currentKey
  1942  06C8  3A00               	xorlw	0
  1943  06C9  1903               	skipnz
  1944  06CA  2FE1               	goto	l2121
  1945  06CB  120A  118A  21FC  120A  118A  	fcall	_previousKey
  1946  06D0  3A00               	xorlw	0
  1947  06D1  1D03               	skipz
  1948  06D2  2FE1               	goto	l2121
  1949                           
  1950                           ;main.c: 252:         {;main.c: 253:             tecla = currentKey();
  1951  06D3  120A  118A  21F8  120A  118A  	fcall	_currentKey
  1952  06D8  1283               	bcf	3,5	;RP0=0, select bank0
  1953  06D9  1303               	bcf	3,6	;RP1=0, select bank0
  1954  06DA  00CA               	movwf	??_main
  1955  06DB  084A               	movf	??_main,w
  1956  06DC  00D3               	movwf	main@tecla
  1957                           
  1958                           ;main.c: 254:             switch(tecla)
  1959  06DD  2F97               	goto	l2117
  1960  06DE                     l2055:	
  1961                           
  1962                           ;main.c: 257:                         ++a;
  1963  06DE  3001               	movlw	1
  1964  06DF  00CA               	movwf	??_main
  1965  06E0  084A               	movf	??_main,w
  1966  06E1  07CD               	addwf	main@a,f
  1967                           
  1968                           ;main.c: 258:                         if( a % 2 )
  1969  06E2  1C4D               	btfss	main@a,0
  1970  06E3  2EEB               	goto	l2061
  1971                           
  1972                           ;main.c: 259:                             putFIFO( tecla );
  1973  06E4  0853               	movf	main@tecla,w
  1974  06E5  120A  118A  2225  120A  118A  	fcall	_putFIFO
  1975  06EA  2FD1               	goto	l2119
  1976  06EB                     l2061:	
  1977                           
  1978                           ;main.c: 261:                             putFIFO( tecla | 0x20 );
  1979  06EB  0853               	movf	main@tecla,w
  1980  06EC  3820               	iorlw	32
  1981  06ED  120A  118A  2225  120A  118A  	fcall	_putFIFO
  1982  06F2  2FD1               	goto	l2119
  1983  06F3                     l2063:	
  1984                           
  1985                           ;main.c: 264:                         ++b;
  1986  06F3  3001               	movlw	1
  1987  06F4  00CA               	movwf	??_main
  1988  06F5  084A               	movf	??_main,w
  1989  06F6  07CE               	addwf	main@b,f
  1990                           
  1991                           ;main.c: 265:                         if( b % 2 )
  1992  06F7  1C4E               	btfss	main@b,0
  1993  06F8  2F00               	goto	l2069
  1994                           
  1995                           ;main.c: 266:                             putFIFO( tecla );
  1996  06F9  0853               	movf	main@tecla,w
  1997  06FA  120A  118A  2225  120A  118A  	fcall	_putFIFO
  1998  06FF  2FD1               	goto	l2119
  1999  0700                     l2069:	
  2000                           
  2001                           ;main.c: 268:                             putFIFO( tecla | 0x20 );
  2002  0700  0853               	movf	main@tecla,w
  2003  0701  3820               	iorlw	32
  2004  0702  120A  118A  2225  120A  118A  	fcall	_putFIFO
  2005  0707  2FD1               	goto	l2119
  2006  0708                     l2071:	
  2007                           
  2008                           ;main.c: 271:                         ++c;
  2009  0708  3001               	movlw	1
  2010  0709  00CA               	movwf	??_main
  2011  070A  084A               	movf	??_main,w
  2012  070B  07CF               	addwf	main@c,f
  2013                           
  2014                           ;main.c: 272:                         if( c % 2 )
  2015  070C  1C4F               	btfss	main@c,0
  2016  070D  2F15               	goto	l2077
  2017                           
  2018                           ;main.c: 273:                             putFIFO( tecla );
  2019  070E  0853               	movf	main@tecla,w
  2020  070F  120A  118A  2225  120A  118A  	fcall	_putFIFO
  2021  0714  2FD1               	goto	l2119
  2022  0715                     l2077:	
  2023                           
  2024                           ;main.c: 275:                             putFIFO( tecla | 0x20 );
  2025  0715  0853               	movf	main@tecla,w
  2026  0716  3820               	iorlw	32
  2027  0717  120A  118A  2225  120A  118A  	fcall	_putFIFO
  2028  071C  2FD1               	goto	l2119
  2029  071D                     l2079:	
  2030                           
  2031                           ;main.c: 278:                         ++d;
  2032  071D  3001               	movlw	1
  2033  071E  00CA               	movwf	??_main
  2034  071F  084A               	movf	??_main,w
  2035  0720  07D0               	addwf	main@d,f
  2036                           
  2037                           ;main.c: 279:                         if( d % 2 )
  2038  0721  1C50               	btfss	main@d,0
  2039  0722  2F2A               	goto	l2085
  2040                           
  2041                           ;main.c: 280:                             putFIFO( tecla );
  2042  0723  0853               	movf	main@tecla,w
  2043  0724  120A  118A  2225  120A  118A  	fcall	_putFIFO
  2044  0729  2FD1               	goto	l2119
  2045  072A                     l2085:	
  2046                           
  2047                           ;main.c: 282:                             putFIFO( tecla | 0x20 );
  2048  072A  0853               	movf	main@tecla,w
  2049  072B  3820               	iorlw	32
  2050  072C  120A  118A  2225  120A  118A  	fcall	_putFIFO
  2051  0731  2FD1               	goto	l2119
  2052  0732                     l2087:	
  2053                           
  2054                           ;main.c: 285:                         clearLCD();
  2055  0732  120A  118A  2200  120A  118A  	fcall	_clearLCD
  2056                           
  2057                           ;main.c: 286:                         a = b = c = d = 0;
  2058  0737  1283               	bcf	3,5	;RP0=0, select bank0
  2059  0738  1303               	bcf	3,6	;RP1=0, select bank0
  2060  0739  01D0               	clrf	main@d
  2061  073A  01CF               	clrf	main@c
  2062  073B  01CE               	clrf	main@b
  2063  073C  01CD               	clrf	main@a
  2064                           
  2065                           ;main.c: 287:                         atuador.ABCD = 0;
  2066  073D  01D1               	clrf	main@atuador
  2067                           
  2068                           ;main.c: 288:                         resetFIFO();
  2069  073E  120A  118A  2212  120A  118A  	fcall	_resetFIFO
  2070                           
  2071                           ;main.c: 289:                         estado = 0;
  2072  0743  1283               	bcf	3,5	;RP0=0, select bank0
  2073  0744  1303               	bcf	3,6	;RP1=0, select bank0
  2074  0745  01D4               	clrf	main@estado
  2075  0746  01D5               	clrf	main@estado+1
  2076                           
  2077                           ;main.c: 290:                         break;
  2078  0747  2FD1               	goto	l2119
  2079  0748                     l276:	
  2080                           ;main.c: 294:                 case '4':
  2081                           
  2082  0748                     l2097:	
  2083                           
  2084                           ;main.c: 300:                         putFIFO(tecla);
  2085  0748  0853               	movf	main@tecla,w
  2086  0749  120A  118A  2225  120A  118A  	fcall	_putFIFO
  2087                           
  2088                           ;main.c: 301:                         break;
  2089  074E  2FD1               	goto	l2119
  2090  074F                     l2099:	
  2091  074F  01CD               	clrf	main@a
  2092  0750  2F8C               	goto	l2111
  2093  0751                     l286:	
  2094                           ;main.c: 306:                             case 'a': a = 1; break;
  2095                           
  2096  0751  01CD               	clrf	main@a
  2097  0752  0ACD               	incf	main@a,f
  2098  0753  2F8C               	goto	l2111
  2099  0754                     l2101:	
  2100  0754  01CE               	clrf	main@b
  2101  0755  2F8C               	goto	l2111
  2102  0756                     l288:	
  2103                           ;main.c: 308:                             case 'b': b = 1; break;
  2104                           
  2105  0756  01CE               	clrf	main@b
  2106  0757  0ACE               	incf	main@b,f
  2107  0758  2F8C               	goto	l2111
  2108  0759                     l2103:	
  2109  0759  01CF               	clrf	main@c
  2110  075A  2F8C               	goto	l2111
  2111  075B                     l290:	
  2112                           ;main.c: 310:                             case 'c': c = 1; break;
  2113                           
  2114  075B  01CF               	clrf	main@c
  2115  075C  0ACF               	incf	main@c,f
  2116  075D  2F8C               	goto	l2111
  2117  075E                     l2105:	
  2118  075E  01D0               	clrf	main@d
  2119  075F  2F8C               	goto	l2111
  2120  0760                     l292:	
  2121                           ;main.c: 312:                             case 'd': d = 1; break;
  2122                           
  2123  0760  01D0               	clrf	main@d
  2124  0761  0AD0               	incf	main@d,f
  2125  0762  2F8C               	goto	l2111
  2126  0763                     l2109:	
  2127  0763  3001               	movlw	1
  2128  0764  120A  118A  227E  120A  118A  	fcall	_delFIFO
  2129  0769  1283               	bcf	3,5	;RP0=0, select bank0
  2130  076A  1303               	bcf	3,6	;RP1=0, select bank0
  2131  076B  00CA               	movwf	??_main
  2132  076C  01CB               	clrf	??_main+1
  2133                           
  2134                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2135                           ; Switch size 1, requested type "simple"
  2136                           ; Number of cases is 1, Range of values is 0 to 0
  2137                           ; switch strategies available:
  2138                           ; Name         Instructions Cycles
  2139                           ; simple_byte            4     3 (average)
  2140                           ; direct_byte           11     8 (fixed)
  2141                           ; jumptable            260     6 (fixed)
  2142                           ;	Chosen strategy is simple_byte
  2143  076D  084B               	movf	??_main+1,w
  2144  076E  3A00               	xorlw	0	; case 0
  2145  076F  1903               	skipnz
  2146  0770  2F72               	goto	l2271
  2147  0771  2F8C               	goto	l2111
  2148  0772                     l2271:	
  2149                           
  2150                           ; Switch size 1, requested type "simple"
  2151                           ; Number of cases is 8, Range of values is 65 to 100
  2152                           ; switch strategies available:
  2153                           ; Name         Instructions Cycles
  2154                           ; simple_byte           25    13 (average)
  2155                           ; direct_byte          119    11 (fixed)
  2156                           ; jumptable            263     9 (fixed)
  2157                           ;	Chosen strategy is simple_byte
  2158  0772  084A               	movf	??_main,w
  2159  0773  3A41               	xorlw	65	; case 65
  2160  0774  1903               	skipnz
  2161  0775  2F4F               	goto	l2099
  2162  0776  3A03               	xorlw	3	; case 66
  2163  0777  1903               	skipnz
  2164  0778  2F54               	goto	l2101
  2165  0779  3A01               	xorlw	1	; case 67
  2166  077A  1903               	skipnz
  2167  077B  2F59               	goto	l2103
  2168  077C  3A07               	xorlw	7	; case 68
  2169  077D  1903               	skipnz
  2170  077E  2F5E               	goto	l2105
  2171  077F  3A25               	xorlw	37	; case 97
  2172  0780  1903               	skipnz
  2173  0781  2F51               	goto	l286
  2174  0782  3A03               	xorlw	3	; case 98
  2175  0783  1903               	skipnz
  2176  0784  2F56               	goto	l288
  2177  0785  3A01               	xorlw	1	; case 99
  2178  0786  1903               	skipnz
  2179  0787  2F5B               	goto	l290
  2180  0788  3A07               	xorlw	7	; case 100
  2181  0789  1903               	skipnz
  2182  078A  2F60               	goto	l292
  2183  078B  2F8C               	goto	l2111
  2184  078C                     l2111:	
  2185                           
  2186                           ;main.c: 314:                         clearLCD();
  2187  078C  120A  118A  2200  120A  118A  	fcall	_clearLCD
  2188                           
  2189                           ;main.c: 315:                         break;
  2190  0791  2FD1               	goto	l2119
  2191  0792                     l2113:	
  2192                           
  2193                           ;main.c: 317:                         estado = 10;
  2194  0792  300A               	movlw	10
  2195  0793  00D4               	movwf	main@estado
  2196  0794  3000               	movlw	0
  2197  0795  00D5               	movwf	main@estado+1
  2198                           
  2199                           ;main.c: 318:                         break;
  2200  0796  2FD1               	goto	l2119
  2201  0797                     l2117:	
  2202  0797  0853               	movf	main@tecla,w
  2203  0798  00CA               	movwf	??_main
  2204  0799  01CB               	clrf	??_main+1
  2205                           
  2206                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2207                           ; Switch size 1, requested type "simple"
  2208                           ; Number of cases is 1, Range of values is 0 to 0
  2209                           ; switch strategies available:
  2210                           ; Name         Instructions Cycles
  2211                           ; simple_byte            4     3 (average)
  2212                           ; direct_byte           11     8 (fixed)
  2213                           ; jumptable            260     6 (fixed)
  2214                           ;	Chosen strategy is simple_byte
  2215  079A  084B               	movf	??_main+1,w
  2216  079B  3A00               	xorlw	0	; case 0
  2217  079C  1903               	skipnz
  2218  079D  2F9F               	goto	l2273
  2219  079E  2FD1               	goto	l2119
  2220  079F                     l2273:	
  2221                           
  2222                           ; Switch size 1, requested type "simple"
  2223                           ; Number of cases is 16, Range of values is 35 to 68
  2224                           ; switch strategies available:
  2225                           ; Name         Instructions Cycles
  2226                           ; simple_byte           49    25 (average)
  2227                           ; direct_byte          113    11 (fixed)
  2228                           ; jumptable            263     9 (fixed)
  2229                           ;	Chosen strategy is simple_byte
  2230  079F  084A               	movf	??_main,w
  2231  07A0  3A23               	xorlw	35	; case 35
  2232  07A1  1903               	skipnz
  2233  07A2  2F92               	goto	l2113
  2234  07A3  3A09               	xorlw	9	; case 42
  2235  07A4  1903               	skipnz
  2236  07A5  2F63               	goto	l2109
  2237  07A6  3A1A               	xorlw	26	; case 48
  2238  07A7  1903               	skipnz
  2239  07A8  2F32               	goto	l2087
  2240  07A9  3A01               	xorlw	1	; case 49
  2241  07AA  1903               	skipnz
  2242  07AB  2F48               	goto	l276
  2243  07AC  3A03               	xorlw	3	; case 50
  2244  07AD  1903               	skipnz
  2245  07AE  2F48               	goto	l2097
  2246  07AF  3A01               	xorlw	1	; case 51
  2247  07B0  1903               	skipnz
  2248  07B1  2F48               	goto	l2097
  2249  07B2  3A07               	xorlw	7	; case 52
  2250  07B3  1903               	skipnz
  2251  07B4  2F48               	goto	l2097
  2252  07B5  3A01               	xorlw	1	; case 53
  2253  07B6  1903               	skipnz
  2254  07B7  2F48               	goto	l2097
  2255  07B8  3A03               	xorlw	3	; case 54
  2256  07B9  1903               	skipnz
  2257  07BA  2F48               	goto	l2097
  2258  07BB  3A01               	xorlw	1	; case 55
  2259  07BC  1903               	skipnz
  2260  07BD  2F48               	goto	l2097
  2261  07BE  3A0F               	xorlw	15	; case 56
  2262  07BF  1903               	skipnz
  2263  07C0  2F48               	goto	l2097
  2264  07C1  3A01               	xorlw	1	; case 57
  2265  07C2  1903               	skipnz
  2266  07C3  2F48               	goto	l2097
  2267  07C4  3A78               	xorlw	120	; case 65
  2268  07C5  1903               	skipnz
  2269  07C6  2EDE               	goto	l2055
  2270  07C7  3A03               	xorlw	3	; case 66
  2271  07C8  1903               	skipnz
  2272  07C9  2EF3               	goto	l2063
  2273  07CA  3A01               	xorlw	1	; case 67
  2274  07CB  1903               	skipnz
  2275  07CC  2F08               	goto	l2071
  2276  07CD  3A07               	xorlw	7	; case 68
  2277  07CE  1903               	skipnz
  2278  07CF  2F1D               	goto	l2079
  2279  07D0  2FD1               	goto	l2119
  2280  07D1                     l2119:	
  2281                           
  2282                           ;main.c: 320:             writeLCD(0,1, displayFIFO() );
  2283  07D1  01F8               	clrf	writeLCD@y
  2284  07D2  0AF8               	incf	writeLCD@y,f
  2285  07D3  120A  118A  21F6  120A  118A  	fcall	_displayFIFO
  2286  07D8  00F9               	movwf	writeLCD@ptr
  2287  07D9  3000               	movlw	0
  2288  07DA  00FA               	movwf	writeLCD@ptr+1
  2289  07DB  3000               	movlw	0
  2290  07DC  120A  118A  22E0  120A  118A  	fcall	_writeLCD
  2291  07E1                     l2121:	
  2292                           
  2293                           ;main.c: 322:         serialIOscan();
  2294  07E1  120A  118A  2376  120A  118A  	fcall	_serialIOscan
  2295  07E6  2D00               	goto	l1903
  2296  07E7                     __end_of_main:	
  2297                           
  2298                           	psect	text1
  2299  0376                     __ptext1:	
  2300 ;; *************** function _serialIOscan *****************
  2301 ;; Defined at:
  2302 ;;		line 76 in file "serialIO.c"
  2303 ;; Parameters:    Size  Location     Type
  2304 ;;		None
  2305 ;; Auto vars:     Size  Location     Type
  2306 ;;  i               1    9[COMMON] unsigned char 
  2307 ;;  j               1    8[COMMON] unsigned char 
  2308 ;; Return value:  Size  Location     Type
  2309 ;;                  1    wreg      void 
  2310 ;; Registers used:
  2311 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2312 ;; Tracked objects:
  2313 ;;		On entry : 0/0
  2314 ;;		On exit  : 0/0
  2315 ;;		Unchanged: 0/0
  2316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2317 ;;      Params:         0       0       0       0       0
  2318 ;;      Locals:         2       0       0       0       0
  2319 ;;      Temps:          4       0       0       0       0
  2320 ;;      Totals:         6       0       0       0       0
  2321 ;;Total ram usage:        6 bytes
  2322 ;; Hardware stack levels used:    1
  2323 ;; Hardware stack levels required when called:    1
  2324 ;; This function calls:
  2325 ;;		_serialIObyteShift
  2326 ;;		_serialIOload
  2327 ;; This function is called by:
  2328 ;;		_main
  2329 ;; This function uses a non-reentrant model
  2330 ;;
  2331                           
  2332                           
  2333                           ;psect for function _serialIOscan
  2334  0376                     _serialIOscan:	
  2335                           
  2336                           ;serialIO.c: 78:     unsigned char i,j;;serialIO.c: 79:     j = lenSerialIO - 1;
  2337                           
  2338                           ;incstack = 0
  2339                           ; Regs used in _serialIOscan: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2340  0376  1283               	bcf	3,5	;RP0=0, select bank0
  2341  0377  1303               	bcf	3,6	;RP1=0, select bank0
  2342  0378  0820               	movf	_lenSerialIO,w
  2343  0379  3EFF               	addlw	255
  2344  037A  00F4               	movwf	??_serialIOscan
  2345  037B  0874               	movf	??_serialIOscan,w
  2346  037C  00F8               	movwf	serialIOscan@j
  2347                           
  2348                           ;serialIO.c: 80:     serialIOload();
  2349  037D  120A  118A  2205  120A  118A  	fcall	_serialIOload
  2350                           
  2351                           ;serialIO.c: 81:     for( i=0; i<lenSerialIO; i++ )
  2352  0382  01F9               	clrf	serialIOscan@i
  2353  0383                     l1859:	
  2354  0383  1283               	bcf	3,5	;RP0=0, select bank0
  2355  0384  1303               	bcf	3,6	;RP1=0, select bank0
  2356  0385  0820               	movf	_lenSerialIO,w
  2357  0386  0279               	subwf	serialIOscan@i,w
  2358  0387  1803               	btfsc	3,0
  2359  0388  2BA9               	goto	l1861
  2360                           
  2361                           ;serialIO.c: 82:     {;serialIO.c: 83:         ptrSerialIn[i] = serialIObyteShift( ptrSe
      +                          rialOut[j-i]);
  2362  0389  0821               	movf	_ptrSerialOut,w
  2363  038A  00F4               	movwf	??_serialIOscan
  2364  038B  0879               	movf	serialIOscan@i,w
  2365  038C  02F4               	subwf	??_serialIOscan,f
  2366  038D  0878               	movf	serialIOscan@j,w
  2367  038E  0774               	addwf	??_serialIOscan,w
  2368  038F  00F5               	movwf	??_serialIOscan+1
  2369  0390  0875               	movf	??_serialIOscan+1,w
  2370  0391  0084               	movwf	4
  2371  0392  1383               	bcf	3,7	;select IRP bank0
  2372  0393  0800               	movf	0,w
  2373  0394  120A  118A  2298  120A  118A  	fcall	_serialIObyteShift
  2374  0399  00F6               	movwf	??_serialIOscan+2
  2375  039A  0879               	movf	serialIOscan@i,w
  2376  039B  1283               	bcf	3,5	;RP0=0, select bank0
  2377  039C  1303               	bcf	3,6	;RP1=0, select bank0
  2378  039D  0722               	addwf	_ptrSerialIn,w
  2379  039E  00F7               	movwf	??_serialIOscan+3
  2380  039F  0877               	movf	??_serialIOscan+3,w
  2381  03A0  0084               	movwf	4
  2382  03A1  0876               	movf	??_serialIOscan+2,w
  2383  03A2  1383               	bcf	3,7	;select IRP bank0
  2384  03A3  0080               	movwf	0
  2385                           
  2386                           ;serialIO.c: 84:     }
  2387  03A4  3001               	movlw	1
  2388  03A5  00F4               	movwf	??_serialIOscan
  2389  03A6  0874               	movf	??_serialIOscan,w
  2390  03A7  07F9               	addwf	serialIOscan@i,f
  2391  03A8  2B83               	goto	l1859
  2392  03A9                     l1861:	
  2393                           
  2394                           ;serialIO.c: 85:     serialIOload();
  2395  03A9  120A  118A  2205   	fcall	_serialIOload
  2396  03AC  0008               	return
  2397  03AD                     __end_of_serialIOscan:	
  2398                           
  2399                           	psect	text2
  2400  0205                     __ptext2:	
  2401 ;; *************** function _serialIOload *****************
  2402 ;; Defined at:
  2403 ;;		line 45 in file "serialIO.c"
  2404 ;; Parameters:    Size  Location     Type
  2405 ;;		None
  2406 ;; Auto vars:     Size  Location     Type
  2407 ;;		None
  2408 ;; Return value:  Size  Location     Type
  2409 ;;                  1    wreg      void 
  2410 ;; Registers used:
  2411 ;;		None
  2412 ;; Tracked objects:
  2413 ;;		On entry : 0/0
  2414 ;;		On exit  : 0/0
  2415 ;;		Unchanged: 0/0
  2416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2417 ;;      Params:         0       0       0       0       0
  2418 ;;      Locals:         0       0       0       0       0
  2419 ;;      Temps:          0       0       0       0       0
  2420 ;;      Totals:         0       0       0       0       0
  2421 ;;Total ram usage:        0 bytes
  2422 ;; Hardware stack levels used:    1
  2423 ;; This function calls:
  2424 ;;		Nothing
  2425 ;; This function is called by:
  2426 ;;		_serialIOscan
  2427 ;; This function uses a non-reentrant model
  2428 ;;
  2429                           
  2430                           
  2431                           ;psect for function _serialIOload
  2432  0205                     _serialIOload:	
  2433                           
  2434                           ;serialIO.c: 47:     SERIALIO.SHLD = 0;
  2435                           
  2436                           ;incstack = 0
  2437                           ; Regs used in _serialIOload: []
  2438  0205  1283               	bcf	3,5	;RP0=0, select bank0
  2439  0206  1303               	bcf	3,6	;RP1=0, select bank0
  2440  0207  1185               	bcf	5,3	;volatile
  2441                           
  2442                           ;serialIO.c: 48:     SERIALIO.SHLD = 1;
  2443  0208  1585               	bsf	5,3	;volatile
  2444  0209  0008               	return
  2445  020A                     __end_of_serialIOload:	
  2446                           
  2447                           	psect	text3
  2448  0298                     __ptext3:	
  2449 ;; *************** function _serialIObyteShift *****************
  2450 ;; Defined at:
  2451 ;;		line 50 in file "serialIO.c"
  2452 ;; Parameters:    Size  Location     Type
  2453 ;;  dataIn          1    wreg     unsigned char 
  2454 ;; Auto vars:     Size  Location     Type
  2455 ;;  dataIn          1    1[COMMON] unsigned char 
  2456 ;;  dataBit         1    3[COMMON] unsigned char 
  2457 ;;  dataOut         1    2[COMMON] unsigned char 
  2458 ;; Return value:  Size  Location     Type
  2459 ;;                  1    wreg      unsigned char 
  2460 ;; Registers used:
  2461 ;;		wreg, status,2, status,0
  2462 ;; Tracked objects:
  2463 ;;		On entry : 0/0
  2464 ;;		On exit  : 0/0
  2465 ;;		Unchanged: 0/0
  2466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2467 ;;      Params:         0       0       0       0       0
  2468 ;;      Locals:         3       0       0       0       0
  2469 ;;      Temps:          1       0       0       0       0
  2470 ;;      Totals:         4       0       0       0       0
  2471 ;;Total ram usage:        4 bytes
  2472 ;; Hardware stack levels used:    1
  2473 ;; This function calls:
  2474 ;;		Nothing
  2475 ;; This function is called by:
  2476 ;;		_serialIOscan
  2477 ;; This function uses a non-reentrant model
  2478 ;;
  2479                           
  2480                           
  2481                           ;psect for function _serialIObyteShift
  2482  0298                     _serialIObyteShift:	
  2483                           
  2484                           ;incstack = 0
  2485                           ; Regs used in _serialIObyteShift: [wreg+status,2+status,0]
  2486                           ;serialIObyteShift@dataIn stored from wreg
  2487  0298  00F1               	movwf	serialIObyteShift@dataIn
  2488                           
  2489                           ;serialIO.c: 50: unsigned char serialIObyteShift( unsigned char dataIn );serialIO.c: 51:
      +                           {;serialIO.c: 52:     unsigned char dataBit;;serialIO.c: 53:     unsigned char dataOut;
      +                          ;serialIO.c: 55:     dataBit = 0x80;
  2490  0299  3080               	movlw	128
  2491  029A  00F0               	movwf	??_serialIObyteShift
  2492  029B  0870               	movf	??_serialIObyteShift,w
  2493  029C  00F3               	movwf	serialIObyteShift@dataBit
  2494                           
  2495                           ;serialIO.c: 56:     dataOut = 0;
  2496  029D  01F2               	clrf	serialIObyteShift@dataOut
  2497  029E                     l1697:	
  2498                           ;serialIO.c: 58:     while( dataBit )
  2499                           
  2500                           
  2501                           ;serialIO.c: 58:     while( dataBit )
  2502  029E  0873               	movf	serialIObyteShift@dataBit,w
  2503  029F  1903               	btfsc	3,2
  2504  02A0  2AB5               	goto	l321
  2505                           
  2506                           ;serialIO.c: 59:     {;serialIO.c: 60:         SERIALIO.CLK = 0;
  2507  02A1  1283               	bcf	3,5	;RP0=0, select bank0
  2508  02A2  1303               	bcf	3,6	;RP1=0, select bank0
  2509  02A3  1105               	bcf	5,2	;volatile
  2510                           
  2511                           ;serialIO.c: 61:         if( dataIn & dataBit )
  2512  02A4  0871               	movf	serialIObyteShift@dataIn,w
  2513  02A5  0573               	andwf	serialIObyteShift@dataBit,w
  2514  02A6  1903               	btfsc	3,2
  2515  02A7  2AAA               	goto	l318
  2516                           
  2517                           ;serialIO.c: 62:             SERIALIO.OUT = 1;
  2518  02A8  1405               	bsf	5,0	;volatile
  2519  02A9  2AAB               	goto	l319
  2520  02AA                     l318:	
  2521                           ;serialIO.c: 63:         else
  2522                           
  2523                           
  2524                           ;serialIO.c: 64:             SERIALIO.OUT = 0;
  2525  02AA  1005               	bcf	5,0	;volatile
  2526  02AB                     l319:	
  2527                           
  2528                           ;serialIO.c: 66:         if( SERIALIO.IN)
  2529  02AB  1C85               	btfss	5,1	;volatile
  2530  02AC  2AB1               	goto	l1693
  2531                           
  2532                           ;serialIO.c: 67:             dataOut |= dataBit;
  2533  02AD  0873               	movf	serialIObyteShift@dataBit,w
  2534  02AE  00F0               	movwf	??_serialIObyteShift
  2535  02AF  0870               	movf	??_serialIObyteShift,w
  2536  02B0  04F2               	iorwf	serialIObyteShift@dataOut,f
  2537  02B1                     l1693:	
  2538                           
  2539                           ;serialIO.c: 68:         SERIALIO.CLK = 1;
  2540  02B1  1505               	bsf	5,2	;volatile
  2541                           
  2542                           ;serialIO.c: 69:         dataBit >>= 1;
  2543  02B2  1003               	clrc
  2544  02B3  0CF3               	rrf	serialIObyteShift@dataBit,f
  2545  02B4  2A9E               	goto	l1697
  2546  02B5                     l321:	
  2547                           
  2548                           ;serialIO.c: 71:     SERIALIO.CLK = 0;
  2549  02B5  1283               	bcf	3,5	;RP0=0, select bank0
  2550  02B6  1303               	bcf	3,6	;RP1=0, select bank0
  2551  02B7  1105               	bcf	5,2	;volatile
  2552                           
  2553                           ;serialIO.c: 72:     return( dataOut );
  2554  02B8  0872               	movf	serialIObyteShift@dataOut,w
  2555  02B9  0008               	return
  2556  02BA                     __end_of_serialIObyteShift:	
  2557                           
  2558                           	psect	text4
  2559  021B                     __ptext4:	
  2560 ;; *************** function _screen_menu *****************
  2561 ;; Defined at:
  2562 ;;		line 144 in file "lcd.c"
  2563 ;; Parameters:    Size  Location     Type
  2564 ;;		None
  2565 ;; Auto vars:     Size  Location     Type
  2566 ;;		None
  2567 ;; Return value:  Size  Location     Type
  2568 ;;                  1    wreg      void 
  2569 ;; Registers used:
  2570 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2571 ;; Tracked objects:
  2572 ;;		On entry : 0/0
  2573 ;;		On exit  : 0/0
  2574 ;;		Unchanged: 0/0
  2575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2576 ;;      Params:         0       0       0       0       0
  2577 ;;      Locals:         0       0       0       0       0
  2578 ;;      Temps:          0       0       0       0       0
  2579 ;;      Totals:         0       0       0       0       0
  2580 ;;Total ram usage:        0 bytes
  2581 ;; Hardware stack levels used:    1
  2582 ;; Hardware stack levels required when called:    3
  2583 ;; This function calls:
  2584 ;;		_writeLCD
  2585 ;; This function is called by:
  2586 ;;		_main
  2587 ;; This function uses a non-reentrant model
  2588 ;;
  2589                           
  2590                           
  2591                           ;psect for function _screen_menu
  2592  021B                     _screen_menu:	
  2593                           
  2594                           ;lcd.c: 146:     writeLCD(0,0,"INSIRA A SEQUEN.");
  2595                           
  2596                           ;incstack = 0
  2597                           ; Regs used in _screen_menu: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2598  021B  01F8               	clrf	writeLCD@y
  2599  021C  3017               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  2600  021D  00F9               	movwf	writeLCD@ptr
  2601  021E  3080               	movlw	128
  2602  021F  00FA               	movwf	writeLCD@ptr+1
  2603  0220  3000               	movlw	0
  2604  0221  120A  118A  22E0   	fcall	_writeLCD
  2605  0224  0008               	return
  2606  0225                     __end_of_screen_menu:	
  2607                           
  2608                           	psect	text5
  2609  03AD                     __ptext5:	
  2610 ;; *************** function _screen_car *****************
  2611 ;; Defined at:
  2612 ;;		line 135 in file "lcd.c"
  2613 ;; Parameters:    Size  Location     Type
  2614 ;;		None
  2615 ;; Auto vars:     Size  Location     Type
  2616 ;;		None
  2617 ;; Return value:  Size  Location     Type
  2618 ;;                  1    wreg      void 
  2619 ;; Registers used:
  2620 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2621 ;; Tracked objects:
  2622 ;;		On entry : 0/0
  2623 ;;		On exit  : 0/0
  2624 ;;		Unchanged: 0/0
  2625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2626 ;;      Params:         0       0       0       0       0
  2627 ;;      Locals:         0       0       0       0       0
  2628 ;;      Temps:          0       3       0       0       0
  2629 ;;      Totals:         0       3       0       0       0
  2630 ;;Total ram usage:        3 bytes
  2631 ;; Hardware stack levels used:    1
  2632 ;; Hardware stack levels required when called:    3
  2633 ;; This function calls:
  2634 ;;		_clearLCD
  2635 ;;		_writeLCD
  2636 ;; This function is called by:
  2637 ;;		_main
  2638 ;; This function uses a non-reentrant model
  2639 ;;
  2640                           
  2641                           
  2642                           ;psect for function _screen_car
  2643  03AD                     _screen_car:	
  2644                           
  2645                           ;lcd.c: 137:     writeLCD(2,0,"SEQUENCIADOR");
  2646                           
  2647                           ;incstack = 0
  2648                           ; Regs used in _screen_car: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2649  03AD  01F8               	clrf	writeLCD@y
  2650  03AE  3028               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  2651  03AF  00F9               	movwf	writeLCD@ptr
  2652  03B0  3080               	movlw	128
  2653  03B1  00FA               	movwf	writeLCD@ptr+1
  2654  03B2  3002               	movlw	2
  2655  03B3  120A  118A  22E0  120A  118A  	fcall	_writeLCD
  2656                           
  2657                           ;lcd.c: 138:     _delay((unsigned long)((200)*(4000000/4000.0)));
  2658  03B8  3002               	movlw	2
  2659  03B9  1283               	bcf	3,5	;RP0=0, select bank0
  2660  03BA  1303               	bcf	3,6	;RP1=0, select bank0
  2661  03BB  00C9               	movwf	??_screen_car+2
  2662  03BC  3004               	movlw	4
  2663  03BD  00C8               	movwf	??_screen_car+1
  2664  03BE  30B9               	movlw	185
  2665  03BF  00C7               	movwf	??_screen_car
  2666  03C0                     u1267:	
  2667  03C0  0BC7               	decfsz	??_screen_car,f
  2668  03C1  2BC0               	goto	u1267
  2669  03C2  0BC8               	decfsz	??_screen_car+1,f
  2670  03C3  2BC0               	goto	u1267
  2671  03C4  0BC9               	decfsz	??_screen_car+2,f
  2672  03C5  2BC0               	goto	u1267
  2673  03C6  2BC7               	nop2
  2674                           
  2675                           ;lcd.c: 139:     writeLCD(2,1,"PROGRAMAVEL");
  2676  03C7  01F8               	clrf	writeLCD@y
  2677  03C8  0AF8               	incf	writeLCD@y,f
  2678  03C9  3035               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  2679  03CA  00F9               	movwf	writeLCD@ptr
  2680  03CB  3080               	movlw	128
  2681  03CC  00FA               	movwf	writeLCD@ptr+1
  2682  03CD  3002               	movlw	2
  2683  03CE  120A  118A  22E0  120A  118A  	fcall	_writeLCD
  2684                           
  2685                           ;lcd.c: 140:     _delay((unsigned long)((2000)*(4000000/4000.0)));
  2686  03D3  300B               	movlw	11
  2687  03D4  1283               	bcf	3,5	;RP0=0, select bank0
  2688  03D5  1303               	bcf	3,6	;RP1=0, select bank0
  2689  03D6  00C9               	movwf	??_screen_car+2
  2690  03D7  3026               	movlw	38
  2691  03D8  00C8               	movwf	??_screen_car+1
  2692  03D9  305D               	movlw	93
  2693  03DA  00C7               	movwf	??_screen_car
  2694  03DB                     u1277:	
  2695  03DB  0BC7               	decfsz	??_screen_car,f
  2696  03DC  2BDB               	goto	u1277
  2697  03DD  0BC8               	decfsz	??_screen_car+1,f
  2698  03DE  2BDB               	goto	u1277
  2699  03DF  0BC9               	decfsz	??_screen_car+2,f
  2700  03E0  2BDB               	goto	u1277
  2701                           
  2702                           ;lcd.c: 141:     clearLCD();
  2703  03E1  120A  118A  2200   	fcall	_clearLCD
  2704  03E4  0008               	return
  2705  03E5                     __end_of_screen_car:	
  2706                           
  2707                           	psect	text6
  2708  02E0                     __ptext6:	
  2709 ;; *************** function _writeLCD *****************
  2710 ;; Defined at:
  2711 ;;		line 87 in file "lcd.c"
  2712 ;; Parameters:    Size  Location     Type
  2713 ;;  x               1    wreg     unsigned char 
  2714 ;;  y               1    8[COMMON] unsigned char 
  2715 ;;  ptr             2    9[COMMON] PTR const unsigned char 
  2716 ;;		 -> STR_3(17), STR_2(12), STR_1(13), checktecla@linha2(17), 
  2717 ;;		 -> fifo(16), 
  2718 ;; Auto vars:     Size  Location     Type
  2719 ;;  x               1   12[COMMON] unsigned char 
  2720 ;; Return value:  Size  Location     Type
  2721 ;;                  1    wreg      void 
  2722 ;; Registers used:
  2723 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2724 ;; Tracked objects:
  2725 ;;		On entry : 0/0
  2726 ;;		On exit  : 0/0
  2727 ;;		Unchanged: 0/0
  2728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2729 ;;      Params:         3       0       0       0       0
  2730 ;;      Locals:         1       0       0       0       0
  2731 ;;      Temps:          1       0       0       0       0
  2732 ;;      Totals:         5       0       0       0       0
  2733 ;;Total ram usage:        5 bytes
  2734 ;; Hardware stack levels used:    1
  2735 ;; Hardware stack levels required when called:    2
  2736 ;; This function calls:
  2737 ;;		_gotoxy
  2738 ;;		_putLCD
  2739 ;; This function is called by:
  2740 ;;		_screen_car
  2741 ;;		_screen_menu
  2742 ;;		_main
  2743 ;;		_checktecla
  2744 ;; This function uses a non-reentrant model
  2745 ;;
  2746                           
  2747                           
  2748                           ;psect for function _writeLCD
  2749  02E0                     _writeLCD:	
  2750                           
  2751                           ;incstack = 0
  2752                           ; Regs used in _writeLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2753                           ;writeLCD@x stored from wreg
  2754  02E0  00FC               	movwf	writeLCD@x
  2755                           
  2756                           ;lcd.c: 87: void writeLCD( unsigned char x, unsigned char y, const char * ptr );lcd.c: 8
      +                          8: {;lcd.c: 89:         gotoxy(x,y);
  2757  02E1  0878               	movf	writeLCD@y,w
  2758  02E2  00FB               	movwf	??_writeLCD
  2759  02E3  087B               	movf	??_writeLCD,w
  2760  02E4  00F4               	movwf	gotoxy@y
  2761  02E5  087C               	movf	writeLCD@x,w
  2762  02E6  120A  118A  2268  120A  118A  	fcall	_gotoxy
  2763  02EB                     l1677:	
  2764                           ;lcd.c: 90:         while( *ptr )
  2765                           
  2766                           
  2767                           ;lcd.c: 90:         while( *ptr )
  2768  02EB  087A               	movf	writeLCD@ptr+1,w
  2769  02EC  1283               	bcf	3,5	;RP0=0, select bank0
  2770  02ED  1303               	bcf	3,6	;RP1=0, select bank0
  2771  02EE  00FF               	movwf	127
  2772  02EF  0879               	movf	writeLCD@ptr,w
  2773  02F0  0084               	movwf	4
  2774  02F1  120A  118A  2003  120A  118A  	fcall	stringtab
  2775  02F6  3A00               	xorlw	0
  2776  02F7  1903               	btfsc	3,2
  2777  02F8  0008               	return
  2778                           
  2779                           ;lcd.c: 91:         putLCD( *ptr++ );
  2780  02F9  087A               	movf	writeLCD@ptr+1,w
  2781  02FA  00FF               	movwf	127
  2782  02FB  0879               	movf	writeLCD@ptr,w
  2783  02FC  0084               	movwf	4
  2784  02FD  120A  118A  2003  120A  118A  	fcall	stringtab
  2785  0302  120A  118A  2342  120A  118A  	fcall	_putLCD
  2786  0307  3001               	movlw	1
  2787  0308  07F9               	addwf	writeLCD@ptr,f
  2788  0309  1803               	skipnc
  2789  030A  0AFA               	incf	writeLCD@ptr+1,f
  2790  030B  3000               	movlw	0
  2791  030C  07FA               	addwf	writeLCD@ptr+1,f
  2792  030D  2AEB               	goto	l1677
  2793  030E                     __end_of_writeLCD:	
  2794                           
  2795                           	psect	text7
  2796  0342                     __ptext7:	
  2797 ;; *************** function _putLCD *****************
  2798 ;; Defined at:
  2799 ;;		line 66 in file "lcd.c"
  2800 ;; Parameters:    Size  Location     Type
  2801 ;;  c               1    wreg     unsigned char 
  2802 ;; Auto vars:     Size  Location     Type
  2803 ;;  c               1    2[COMMON] unsigned char 
  2804 ;;  nibble          1    3[COMMON] volatile struct .
  2805 ;; Return value:  Size  Location     Type
  2806 ;;                  1    wreg      void 
  2807 ;; Registers used:
  2808 ;;		wreg, status,2, status,0
  2809 ;; Tracked objects:
  2810 ;;		On entry : 0/0
  2811 ;;		On exit  : 0/0
  2812 ;;		Unchanged: 0/0
  2813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2814 ;;      Params:         0       0       0       0       0
  2815 ;;      Locals:         2       0       0       0       0
  2816 ;;      Temps:          2       0       0       0       0
  2817 ;;      Totals:         4       0       0       0       0
  2818 ;;Total ram usage:        4 bytes
  2819 ;; Hardware stack levels used:    1
  2820 ;; This function calls:
  2821 ;;		Nothing
  2822 ;; This function is called by:
  2823 ;;		_writeLCD
  2824 ;; This function uses a non-reentrant model
  2825 ;;
  2826                           
  2827                           
  2828                           ;psect for function _putLCD
  2829  0342                     _putLCD:	
  2830                           
  2831                           ;incstack = 0
  2832                           ; Regs used in _putLCD: [wreg+status,2+status,0]
  2833                           ;putLCD@c stored from wreg
  2834  0342  00F2               	movwf	putLCD@c
  2835                           
  2836                           ;lcd.c: 66: void putLCD( unsigned char c );lcd.c: 67:  {;lcd.c: 68:         volatile REG
      +                          nibble_t nibble;;lcd.c: 70:         nibble.HILO = c;
  2837  0343  0872               	movf	putLCD@c,w
  2838  0344  00F0               	movwf	??_putLCD
  2839  0345  0870               	movf	??_putLCD,w
  2840  0346  00F3               	movwf	putLCD@nibble	;volatile
  2841                           
  2842                           ;lcd.c: 71:         LCD.RS = 1;
  2843  0347  1283               	bcf	3,5	;RP0=0, select bank0
  2844  0348  1303               	bcf	3,6	;RP1=0, select bank0
  2845  0349  1608               	bsf	8,4	;volatile
  2846                           
  2847                           ;lcd.c: 72:         LCD.BUS= nibble.HI;
  2848  034A  0E73               	swapf	putLCD@nibble,w	;volatile
  2849  034B  390F               	andlw	15
  2850  034C  00F0               	movwf	??_putLCD
  2851  034D  0808               	movf	8,w	;volatile
  2852  034E  0670               	xorwf	??_putLCD,w
  2853  034F  39F0               	andlw	-16
  2854  0350  0670               	xorwf	??_putLCD,w
  2855  0351  0088               	movwf	8	;volatile
  2856                           
  2857                           ;lcd.c: 73:         LCD.EN = 0;
  2858  0352  1288               	bcf	8,5	;volatile
  2859                           
  2860                           ;lcd.c: 74:         _delay((unsigned long)((2)*(4000000/4000.0)));
  2861  0353  3003               	movlw	3
  2862  0354  00F1               	movwf	??_putLCD+1
  2863  0355  3097               	movlw	151
  2864  0356  00F0               	movwf	??_putLCD
  2865  0357                     u1287:	
  2866  0357  0BF0               	decfsz	??_putLCD,f
  2867  0358  2B57               	goto	u1287
  2868  0359  0BF1               	decfsz	??_putLCD+1,f
  2869  035A  2B57               	goto	u1287
  2870  035B  2B5C               	nop2
  2871                           
  2872                           ;lcd.c: 75:         LCD.EN = 1;
  2873  035C  1283               	bcf	3,5	;RP0=0, select bank0
  2874  035D  1303               	bcf	3,6	;RP1=0, select bank0
  2875  035E  1688               	bsf	8,5	;volatile
  2876                           
  2877                           ;lcd.c: 77:         LCD.RS = 1;
  2878  035F  1608               	bsf	8,4	;volatile
  2879                           
  2880                           ;lcd.c: 78:         LCD.BUS = nibble.LO;
  2881  0360  0873               	movf	putLCD@nibble,w	;volatile
  2882  0361  390F               	andlw	15
  2883  0362  00F0               	movwf	??_putLCD
  2884  0363  0808               	movf	8,w	;volatile
  2885  0364  0670               	xorwf	??_putLCD,w
  2886  0365  39F0               	andlw	-16
  2887  0366  0670               	xorwf	??_putLCD,w
  2888  0367  0088               	movwf	8	;volatile
  2889                           
  2890                           ;lcd.c: 79:         LCD.EN = 0;
  2891  0368  1288               	bcf	8,5	;volatile
  2892                           
  2893                           ;lcd.c: 80:         _delay((unsigned long)((2)*(4000000/4000.0)));
  2894  0369  3003               	movlw	3
  2895  036A  00F1               	movwf	??_putLCD+1
  2896  036B  3097               	movlw	151
  2897  036C  00F0               	movwf	??_putLCD
  2898  036D                     u1297:	
  2899  036D  0BF0               	decfsz	??_putLCD,f
  2900  036E  2B6D               	goto	u1297
  2901  036F  0BF1               	decfsz	??_putLCD+1,f
  2902  0370  2B6D               	goto	u1297
  2903  0371  2B72               	nop2
  2904                           
  2905                           ;lcd.c: 81:         LCD.EN = 1;
  2906  0372  1283               	bcf	3,5	;RP0=0, select bank0
  2907  0373  1303               	bcf	3,6	;RP1=0, select bank0
  2908  0374  1688               	bsf	8,5	;volatile
  2909  0375  0008               	return
  2910  0376                     __end_of_putLCD:	
  2911                           
  2912                           	psect	text8
  2913  0268                     __ptext8:	
  2914 ;; *************** function _gotoxy *****************
  2915 ;; Defined at:
  2916 ;;		line 83 in file "lcd.c"
  2917 ;; Parameters:    Size  Location     Type
  2918 ;;  x               1    wreg     unsigned char 
  2919 ;;  y               1    4[COMMON] unsigned char 
  2920 ;; Auto vars:     Size  Location     Type
  2921 ;;  x               1    7[COMMON] unsigned char 
  2922 ;; Return value:  Size  Location     Type
  2923 ;;                  1    wreg      void 
  2924 ;; Registers used:
  2925 ;;		wreg, status,2, status,0, pclath, cstack
  2926 ;; Tracked objects:
  2927 ;;		On entry : 0/0
  2928 ;;		On exit  : 0/0
  2929 ;;		Unchanged: 0/0
  2930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2931 ;;      Params:         1       0       0       0       0
  2932 ;;      Locals:         1       0       0       0       0
  2933 ;;      Temps:          2       0       0       0       0
  2934 ;;      Totals:         4       0       0       0       0
  2935 ;;Total ram usage:        4 bytes
  2936 ;; Hardware stack levels used:    1
  2937 ;; Hardware stack levels required when called:    1
  2938 ;; This function calls:
  2939 ;;		_cmdLCD
  2940 ;; This function is called by:
  2941 ;;		_writeLCD
  2942 ;; This function uses a non-reentrant model
  2943 ;;
  2944                           
  2945                           
  2946                           ;psect for function _gotoxy
  2947  0268                     _gotoxy:	
  2948                           
  2949                           ;incstack = 0
  2950                           ; Regs used in _gotoxy: [wreg+status,2+status,0+pclath+cstack]
  2951                           ;gotoxy@x stored from wreg
  2952  0268  00F7               	movwf	gotoxy@x
  2953                           
  2954                           ;lcd.c: 83: void gotoxy( unsigned char x, unsigned char y );lcd.c: 84: {;lcd.c: 85:     
      +                              cmdLCD((0x80 | 0xC0 * y) + (x & 0X3F));
  2955  0269  303F               	movlw	63
  2956  026A  0577               	andwf	gotoxy@x,w
  2957  026B  00F5               	movwf	??_gotoxy
  2958  026C  0874               	movf	gotoxy@y,w
  2959  026D  00F6               	movwf	??_gotoxy+1
  2960  026E  3005               	movlw	5
  2961  026F                     u645:	
  2962  026F  1003               	clrc
  2963  0270  0DF6               	rlf	??_gotoxy+1,f
  2964  0271  3EFF               	addlw	-1
  2965  0272  1D03               	skipz
  2966  0273  2A6F               	goto	u645
  2967  0274  1003               	clrc
  2968  0275  0D76               	rlf	??_gotoxy+1,w
  2969  0276  3AFF               	xorlw	255
  2970  0277  3E01               	addlw	1
  2971  0278  3880               	iorlw	128
  2972  0279  0775               	addwf	??_gotoxy,w
  2973  027A  120A  118A  2424   	fcall	_cmdLCD
  2974  027D  0008               	return
  2975  027E                     __end_of_gotoxy:	
  2976                           
  2977                           	psect	text9
  2978  0200                     __ptext9:	
  2979 ;; *************** function _clearLCD *****************
  2980 ;; Defined at:
  2981 ;;		line 103 in file "lcd.c"
  2982 ;; Parameters:    Size  Location     Type
  2983 ;;		None
  2984 ;; Auto vars:     Size  Location     Type
  2985 ;;		None
  2986 ;; Return value:  Size  Location     Type
  2987 ;;                  1    wreg      void 
  2988 ;; Registers used:
  2989 ;;		wreg, status,2, status,0, pclath, cstack
  2990 ;; Tracked objects:
  2991 ;;		On entry : 0/0
  2992 ;;		On exit  : 0/0
  2993 ;;		Unchanged: 0/0
  2994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2995 ;;      Params:         0       0       0       0       0
  2996 ;;      Locals:         0       0       0       0       0
  2997 ;;      Temps:          0       0       0       0       0
  2998 ;;      Totals:         0       0       0       0       0
  2999 ;;Total ram usage:        0 bytes
  3000 ;; Hardware stack levels used:    1
  3001 ;; Hardware stack levels required when called:    1
  3002 ;; This function calls:
  3003 ;;		_cmdLCD
  3004 ;; This function is called by:
  3005 ;;		_screen_car
  3006 ;;		_main
  3007 ;; This function uses a non-reentrant model
  3008 ;;
  3009                           
  3010                           
  3011                           ;psect for function _clearLCD
  3012  0200                     _clearLCD:	
  3013                           
  3014                           ;lcd.c: 105:     cmdLCD(0x01);
  3015                           
  3016                           ;incstack = 0
  3017                           ; Regs used in _clearLCD: [wreg+status,2+status,0+pclath+cstack]
  3018  0200  3001               	movlw	1
  3019  0201  120A  118A  2424   	fcall	_cmdLCD
  3020  0204  0008               	return
  3021  0205                     __end_of_clearLCD:	
  3022                           
  3023                           	psect	text10
  3024  0212                     __ptext10:	
  3025 ;; *************** function _resetFIFO *****************
  3026 ;; Defined at:
  3027 ;;		line 65 in file "fifo.c"
  3028 ;; Parameters:    Size  Location     Type
  3029 ;;		None
  3030 ;; Auto vars:     Size  Location     Type
  3031 ;;		None
  3032 ;; Return value:  Size  Location     Type
  3033 ;;                  1    wreg      void 
  3034 ;; Registers used:
  3035 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3036 ;; Tracked objects:
  3037 ;;		On entry : 0/0
  3038 ;;		On exit  : 0/0
  3039 ;;		Unchanged: 0/0
  3040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3041 ;;      Params:         0       0       0       0       0
  3042 ;;      Locals:         0       0       0       0       0
  3043 ;;      Temps:          0       0       0       0       0
  3044 ;;      Totals:         0       0       0       0       0
  3045 ;;Total ram usage:        0 bytes
  3046 ;; Hardware stack levels used:    1
  3047 ;; Hardware stack levels required when called:    1
  3048 ;; This function calls:
  3049 ;;		_delFIFO
  3050 ;; This function is called by:
  3051 ;;		_main
  3052 ;; This function uses a non-reentrant model
  3053 ;;
  3054                           
  3055                           
  3056                           ;psect for function _resetFIFO
  3057  0212                     _resetFIFO:	
  3058                           
  3059                           ;fifo.c: 67:     delFIFO(16);
  3060                           
  3061                           ;incstack = 0
  3062                           ; Regs used in _resetFIFO: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3063  0212  3010               	movlw	16
  3064  0213  120A  118A  227E   	fcall	_delFIFO
  3065                           
  3066                           ;fifo.c: 68:     fifoHead = 0;
  3067  0216  01FD               	clrf	_fifoHead
  3068                           
  3069                           ;fifo.c: 69:     fifoTail = 0;
  3070  0217  1283               	bcf	3,5	;RP0=0, select bank0
  3071  0218  1303               	bcf	3,6	;RP1=0, select bank0
  3072  0219  01A5               	clrf	_fifoTail
  3073  021A  0008               	return
  3074  021B                     __end_of_resetFIFO:	
  3075                           
  3076                           	psect	text11
  3077  027E                     __ptext11:	
  3078 ;; *************** function _delFIFO *****************
  3079 ;; Defined at:
  3080 ;;		line 52 in file "fifo.c"
  3081 ;; Parameters:    Size  Location     Type
  3082 ;;  n               1    wreg     unsigned char 
  3083 ;; Auto vars:     Size  Location     Type
  3084 ;;  n               1    1[COMMON] unsigned char 
  3085 ;;  ret             1    2[COMMON] unsigned char 
  3086 ;; Return value:  Size  Location     Type
  3087 ;;                  1    wreg      unsigned char 
  3088 ;; Registers used:
  3089 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3090 ;; Tracked objects:
  3091 ;;		On entry : 0/0
  3092 ;;		On exit  : 0/0
  3093 ;;		Unchanged: 0/0
  3094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3095 ;;      Params:         0       0       0       0       0
  3096 ;;      Locals:         2       0       0       0       0
  3097 ;;      Temps:          1       0       0       0       0
  3098 ;;      Totals:         3       0       0       0       0
  3099 ;;Total ram usage:        3 bytes
  3100 ;; Hardware stack levels used:    1
  3101 ;; This function calls:
  3102 ;;		Nothing
  3103 ;; This function is called by:
  3104 ;;		_resetFIFO
  3105 ;;		_main
  3106 ;; This function uses a non-reentrant model
  3107 ;;
  3108                           
  3109                           
  3110                           ;psect for function _delFIFO
  3111  027E                     _delFIFO:	
  3112                           
  3113                           ;incstack = 0
  3114                           ; Regs used in _delFIFO: [wreg-fsr0h+status,2+status,0]
  3115                           ;delFIFO@n stored from wreg
  3116  027E  00F1               	movwf	delFIFO@n
  3117                           
  3118                           ;fifo.c: 52: unsigned char delFIFO( unsigned char n );fifo.c: 53: {;fifo.c: 54:     unsi
      +                          gned char ret;;fifo.c: 55:     while( n && fifoHead )
  3119  027F  2A93               	goto	l24
  3120  0280                     l1665:	
  3121  0280  087D               	movf	_fifoHead,w
  3122  0281  1903               	btfsc	3,2
  3123  0282  2A96               	goto	l1667
  3124                           
  3125                           ;fifo.c: 56:     {;fifo.c: 57:         --fifoHead;
  3126  0283  3001               	movlw	1
  3127  0284  02FD               	subwf	_fifoHead,f
  3128                           
  3129                           ;fifo.c: 58:         ret = fifo[fifoHead];
  3130  0285  087D               	movf	_fifoHead,w
  3131  0286  3E26               	addlw	(low (_fifo| 0))& (0+255)
  3132  0287  0084               	movwf	4
  3133  0288  1383               	bcf	3,7	;select IRP bank0
  3134  0289  0800               	movf	0,w
  3135  028A  00F0               	movwf	??_delFIFO
  3136  028B  0870               	movf	??_delFIFO,w
  3137  028C  00F2               	movwf	delFIFO@ret
  3138                           
  3139                           ;fifo.c: 59:         fifo[ fifoHead ] = 0;
  3140  028D  087D               	movf	_fifoHead,w
  3141  028E  3E26               	addlw	(low (_fifo| 0))& (0+255)
  3142  028F  0084               	movwf	4
  3143  0290  0180               	clrf	0
  3144                           
  3145                           ;fifo.c: 60:         --n;
  3146  0291  3001               	movlw	1
  3147  0292  02F1               	subwf	delFIFO@n,f
  3148  0293                     l24:	
  3149                           ;fifo.c: 61:     }
  3150                           
  3151                           
  3152                           ;fifo.c: 55:     while( n && fifoHead )
  3153  0293  0871               	movf	delFIFO@n,w
  3154  0294  1D03               	btfss	3,2
  3155  0295  2A80               	goto	l1665
  3156  0296                     l1667:	
  3157                           
  3158                           ;fifo.c: 62:     return( ret );
  3159  0296  0872               	movf	delFIFO@ret,w
  3160  0297  0008               	return
  3161  0298                     __end_of_delFIFO:	
  3162                           
  3163                           	psect	text12
  3164  0225                     __ptext12:	
  3165 ;; *************** function _putFIFO *****************
  3166 ;; Defined at:
  3167 ;;		line 19 in file "fifo.c"
  3168 ;; Parameters:    Size  Location     Type
  3169 ;;  c               1    wreg     unsigned char 
  3170 ;; Auto vars:     Size  Location     Type
  3171 ;;  c               1    1[COMMON] unsigned char 
  3172 ;; Return value:  Size  Location     Type
  3173 ;;                  1    wreg      void 
  3174 ;; Registers used:
  3175 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3176 ;; Tracked objects:
  3177 ;;		On entry : 0/0
  3178 ;;		On exit  : 0/0
  3179 ;;		Unchanged: 0/0
  3180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3181 ;;      Params:         0       0       0       0       0
  3182 ;;      Locals:         1       0       0       0       0
  3183 ;;      Temps:          1       0       0       0       0
  3184 ;;      Totals:         2       0       0       0       0
  3185 ;;Total ram usage:        2 bytes
  3186 ;; Hardware stack levels used:    1
  3187 ;; This function calls:
  3188 ;;		Nothing
  3189 ;; This function is called by:
  3190 ;;		_main
  3191 ;; This function uses a non-reentrant model
  3192 ;;
  3193                           
  3194                           
  3195                           ;psect for function _putFIFO
  3196  0225                     _putFIFO:	
  3197                           
  3198                           ;incstack = 0
  3199                           ; Regs used in _putFIFO: [wreg-fsr0h+status,2+status,0]
  3200                           ;putFIFO@c stored from wreg
  3201  0225  00F1               	movwf	putFIFO@c
  3202                           
  3203                           ;fifo.c: 19: void putFIFO( unsigned char c );fifo.c: 20: {;fifo.c: 21:     fifo[ fifoHea
      +                          d ] = c;
  3204  0226  0871               	movf	putFIFO@c,w
  3205  0227  00F0               	movwf	??_putFIFO
  3206  0228  087D               	movf	_fifoHead,w
  3207  0229  3E26               	addlw	(low (_fifo| 0))& (0+255)
  3208  022A  0084               	movwf	4
  3209  022B  0870               	movf	??_putFIFO,w
  3210  022C  1383               	bcf	3,7	;select IRP bank0
  3211  022D  0080               	movwf	0
  3212                           
  3213                           ;fifo.c: 22:     ++fifoHead;
  3214  022E  3001               	movlw	1
  3215  022F  00F0               	movwf	??_putFIFO
  3216  0230  0870               	movf	??_putFIFO,w
  3217  0231  07FD               	addwf	_fifoHead,f
  3218  0232  0008               	return
  3219  0233                     __end_of_putFIFO:	
  3220                           
  3221                           	psect	text13
  3222  01FC                     __ptext13:	
  3223 ;; *************** function _previousKey *****************
  3224 ;; Defined at:
  3225 ;;		line 55 in file "keyboard.c"
  3226 ;; Parameters:    Size  Location     Type
  3227 ;;		None
  3228 ;; Auto vars:     Size  Location     Type
  3229 ;;		None
  3230 ;; Return value:  Size  Location     Type
  3231 ;;                  1    wreg      unsigned char 
  3232 ;; Registers used:
  3233 ;;		wreg
  3234 ;; Tracked objects:
  3235 ;;		On entry : 0/0
  3236 ;;		On exit  : 0/0
  3237 ;;		Unchanged: 0/0
  3238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3239 ;;      Params:         0       0       0       0       0
  3240 ;;      Locals:         0       0       0       0       0
  3241 ;;      Temps:          0       0       0       0       0
  3242 ;;      Totals:         0       0       0       0       0
  3243 ;;Total ram usage:        0 bytes
  3244 ;; Hardware stack levels used:    1
  3245 ;; This function calls:
  3246 ;;		Nothing
  3247 ;; This function is called by:
  3248 ;;		_main
  3249 ;; This function uses a non-reentrant model
  3250 ;;
  3251                           
  3252                           
  3253                           ;psect for function _previousKey
  3254  01FC                     _previousKey:	
  3255                           
  3256                           ;keyboard.c: 57:     return( prevKey );
  3257                           
  3258                           ;incstack = 0
  3259                           ; Regs used in _previousKey: [wreg]
  3260  01FC  1283               	bcf	3,5	;RP0=0, select bank0
  3261  01FD  1303               	bcf	3,6	;RP1=0, select bank0
  3262  01FE  0824               	movf	_prevKey,w
  3263  01FF  0008               	return
  3264  0200                     __end_of_previousKey:	
  3265                           
  3266                           	psect	text14
  3267  0474                     __ptext14:	
  3268 ;; *************** function _keyboardScan *****************
  3269 ;; Defined at:
  3270 ;;		line 75 in file "keyboard.c"
  3271 ;; Parameters:    Size  Location     Type
  3272 ;;		None
  3273 ;; Auto vars:     Size  Location     Type
  3274 ;;  j               1   10[COMMON] unsigned char 
  3275 ;;  i               1    9[COMMON] unsigned char 
  3276 ;;  aux             1    8[COMMON] unsigned char 
  3277 ;; Return value:  Size  Location     Type
  3278 ;;                  1    wreg      unsigned char 
  3279 ;; Registers used:
  3280 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3281 ;; Tracked objects:
  3282 ;;		On entry : 0/0
  3283 ;;		On exit  : 0/0
  3284 ;;		Unchanged: 0/0
  3285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3286 ;;      Params:         0       0       0       0       0
  3287 ;;      Locals:         3       0       0       0       0
  3288 ;;      Temps:          8       0       0       0       0
  3289 ;;      Totals:        11       0       0       0       0
  3290 ;;Total ram usage:       11 bytes
  3291 ;; Hardware stack levels used:    2
  3292 ;; This function calls:
  3293 ;;		Nothing
  3294 ;; This function is called by:
  3295 ;;		_main
  3296 ;; This function uses a non-reentrant model
  3297 ;;
  3298                           
  3299                           
  3300                           ;psect for function _keyboardScan
  3301  0474                     _keyboardScan:	
  3302                           
  3303                           ;keyboard.c: 77:     unsigned char i, j;;keyboard.c: 78:     unsigned char aux = 0;
  3304                           
  3305                           ;incstack = 0
  3306                           ; Regs used in _keyboardScan: [wreg-fsr0h+status,2+status,0+pclath]
  3307  0474  01F8               	clrf	keyboardScan@aux
  3308                           
  3309                           ;keyboard.c: 80:     for( j=0; j<4; j++ )
  3310  0475  01FA               	clrf	keyboardScan@j
  3311  0476                     l1745:	
  3312  0476  3004               	movlw	4
  3313  0477  027A               	subwf	keyboardScan@j,w
  3314  0478  1803               	btfsc	3,0
  3315  0479  2CCF               	goto	l1769
  3316                           
  3317                           ;keyboard.c: 81:     {;keyboard.c: 82:         KEYBOARDbits.cols = ~(0x01<<j);
  3318  047A  3001               	movlw	1
  3319  047B  00F0               	movwf	??_keyboardScan
  3320  047C  0A7A               	incf	keyboardScan@j,w
  3321  047D  2C80               	goto	u744
  3322  047E                     u745:	
  3323  047E  1003               	clrc
  3324  047F  0DF0               	rlf	??_keyboardScan,f
  3325  0480                     u744:	
  3326  0480  3EFF               	addlw	-1
  3327  0481  1D03               	skipz
  3328  0482  2C7E               	goto	u745
  3329  0483  0870               	movf	??_keyboardScan,w
  3330  0484  3AFF               	xorlw	255
  3331  0485  00F1               	movwf	??_keyboardScan+1
  3332  0486  0EF1               	swapf	??_keyboardScan+1,f
  3333  0487  1283               	bcf	3,5	;RP0=0, select bank0
  3334  0488  1303               	bcf	3,6	;RP1=0, select bank0
  3335  0489  0806               	movf	6,w	;volatile
  3336  048A  0671               	xorwf	??_keyboardScan+1,w
  3337  048B  390F               	andlw	-241
  3338  048C  0671               	xorwf	??_keyboardScan+1,w
  3339  048D  0086               	movwf	6	;volatile
  3340                           
  3341                           ;keyboard.c: 83:         for( i=0; i<4; i++ )
  3342  048E  01F9               	clrf	keyboardScan@i
  3343  048F                     l1757:	
  3344                           
  3345                           ;keyboard.c: 84:         {;keyboard.c: 85:             if( ~KEYBOARDbits.rows & (0x01<<i
      +                          ) )
  3346  048F  0806               	movf	6,w	;volatile
  3347  0490  390F               	andlw	15
  3348  0491  00F0               	movwf	??_keyboardScan
  3349  0492  0970               	comf	??_keyboardScan,w
  3350  0493  00F1               	movwf	??_keyboardScan+1
  3351  0494  01F2               	clrf	??_keyboardScan+2
  3352  0495  09F2               	comf	??_keyboardScan+2,f
  3353  0496  0A79               	incf	keyboardScan@i,w
  3354  0497  00F3               	movwf	??_keyboardScan+3
  3355  0498  3001               	movlw	1
  3356  0499  00F4               	movwf	??_keyboardScan+4
  3357  049A  3000               	movlw	0
  3358  049B  00F5               	movwf	??_keyboardScan+5
  3359  049C  2CA0               	goto	u754
  3360  049D                     u755:	
  3361  049D  1003               	clrc
  3362  049E  0DF4               	rlf	??_keyboardScan+4,f
  3363  049F  0DF5               	rlf	??_keyboardScan+5,f
  3364  04A0                     u754:	
  3365  04A0  0BF3               	decfsz	??_keyboardScan+3,f
  3366  04A1  2C9D               	goto	u755
  3367  04A2  0871               	movf	??_keyboardScan+1,w
  3368  04A3  0574               	andwf	??_keyboardScan+4,w
  3369  04A4  00F6               	movwf	??_keyboardScan+6
  3370  04A5  0872               	movf	??_keyboardScan+2,w
  3371  04A6  0575               	andwf	??_keyboardScan+5,w
  3372  04A7  00F7               	movwf	??_keyboardScan+7
  3373  04A8  0876               	movf	??_keyboardScan+6,w
  3374  04A9  0477               	iorwf	??_keyboardScan+7,w
  3375  04AA  1903               	btfsc	3,2
  3376  04AB  2CC2               	goto	l1761
  3377                           
  3378                           ;keyboard.c: 86:                 aux = keyboardMatrix[i][j];
  3379  04AC  0879               	movf	keyboardScan@i,w
  3380  04AD  00F0               	movwf	??_keyboardScan
  3381  04AE  3002               	movlw	2
  3382  04AF                     u775:	
  3383  04AF  1003               	clrc
  3384  04B0  0DF0               	rlf	??_keyboardScan,f
  3385  04B1  3EFF               	addlw	-1
  3386  04B2  1D03               	skipz
  3387  04B3  2CAF               	goto	u775
  3388  04B4  3001               	movlw	(low ((_keyboardMatrix-__stringbase)| (0+32768)))& (0+255)
  3389  04B5  0770               	addwf	??_keyboardScan,w
  3390  04B6  00F1               	movwf	??_keyboardScan+1
  3391  04B7  087A               	movf	keyboardScan@j,w
  3392  04B8  0771               	addwf	??_keyboardScan+1,w
  3393  04B9  0084               	movwf	4
  3394  04BA  120A  118A  200D  120A  118A  	fcall	stringdir
  3395  04BF  00F2               	movwf	??_keyboardScan+2
  3396  04C0  0872               	movf	??_keyboardScan+2,w
  3397  04C1  00F8               	movwf	keyboardScan@aux
  3398  04C2                     l1761:	
  3399                           
  3400                           ;keyboard.c: 87:         }
  3401  04C2  3001               	movlw	1
  3402  04C3  00F0               	movwf	??_keyboardScan
  3403  04C4  0870               	movf	??_keyboardScan,w
  3404  04C5  07F9               	addwf	keyboardScan@i,f
  3405  04C6  3004               	movlw	4
  3406  04C7  0279               	subwf	keyboardScan@i,w
  3407  04C8  1C03               	skipc
  3408  04C9  2C8F               	goto	l1757
  3409                           
  3410                           ;keyboard.c: 88:     }
  3411  04CA  3001               	movlw	1
  3412  04CB  00F0               	movwf	??_keyboardScan
  3413  04CC  0870               	movf	??_keyboardScan,w
  3414  04CD  07FA               	addwf	keyboardScan@j,f
  3415  04CE  2C76               	goto	l1745
  3416  04CF                     l1769:	
  3417                           
  3418                           ;keyboard.c: 90:     prevKey = currKey;
  3419  04CF  1283               	bcf	3,5	;RP0=0, select bank0
  3420  04D0  1303               	bcf	3,6	;RP1=0, select bank0
  3421  04D1  0823               	movf	_currKey,w
  3422  04D2  00F0               	movwf	??_keyboardScan
  3423  04D3  0870               	movf	??_keyboardScan,w
  3424  04D4  00A4               	movwf	_prevKey
  3425                           
  3426                           ;keyboard.c: 91:     currKey = aux;
  3427  04D5  0878               	movf	keyboardScan@aux,w
  3428  04D6  00F0               	movwf	??_keyboardScan
  3429  04D7  0870               	movf	??_keyboardScan,w
  3430  04D8  00A3               	movwf	_currKey
  3431  04D9  0008               	return
  3432  04DA                     __end_of_keyboardScan:	
  3433                           
  3434                           	psect	text15
  3435  030E                     __ptext15:	
  3436 ;; *************** function _initSerialIO *****************
  3437 ;; Defined at:
  3438 ;;		line 89 in file "serialIO.c"
  3439 ;; Parameters:    Size  Location     Type
  3440 ;;  ptrIn           1    wreg     PTR unsigned char 
  3441 ;;		 -> main@sensor(1), 
  3442 ;;  ptrOut          1    0[COMMON] PTR unsigned char 
  3443 ;;		 -> main@atuador(1), 
  3444 ;;  length          1    1[COMMON] unsigned char 
  3445 ;; Auto vars:     Size  Location     Type
  3446 ;;  ptrIn           1    3[COMMON] PTR unsigned char 
  3447 ;;		 -> main@sensor(1), 
  3448 ;; Return value:  Size  Location     Type
  3449 ;;                  1    wreg      void 
  3450 ;; Registers used:
  3451 ;;		wreg
  3452 ;; Tracked objects:
  3453 ;;		On entry : 0/0
  3454 ;;		On exit  : 0/0
  3455 ;;		Unchanged: 0/0
  3456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3457 ;;      Params:         2       0       0       0       0
  3458 ;;      Locals:         1       0       0       0       0
  3459 ;;      Temps:          1       0       0       0       0
  3460 ;;      Totals:         4       0       0       0       0
  3461 ;;Total ram usage:        4 bytes
  3462 ;; Hardware stack levels used:    1
  3463 ;; This function calls:
  3464 ;;		Nothing
  3465 ;; This function is called by:
  3466 ;;		_main
  3467 ;; This function uses a non-reentrant model
  3468 ;;
  3469                           
  3470                           
  3471                           ;psect for function _initSerialIO
  3472  030E                     _initSerialIO:	
  3473                           
  3474                           ;incstack = 0
  3475                           ; Regs used in _initSerialIO: [wreg]
  3476                           ;initSerialIO@ptrIn stored from wreg
  3477  030E  00F3               	movwf	initSerialIO@ptrIn
  3478                           
  3479                           ;serialIO.c: 89: void initSerialIO( unsigned char * ptrIn, unsigned char * ptrOut, unsig
      +                          ned char length );serialIO.c: 90: {;serialIO.c: 91:     ptrSerialIn = ptrIn;
  3480  030F  0873               	movf	initSerialIO@ptrIn,w
  3481  0310  00F2               	movwf	??_initSerialIO
  3482  0311  0872               	movf	??_initSerialIO,w
  3483  0312  1283               	bcf	3,5	;RP0=0, select bank0
  3484  0313  1303               	bcf	3,6	;RP1=0, select bank0
  3485  0314  00A2               	movwf	_ptrSerialIn
  3486                           
  3487                           ;serialIO.c: 92:     ptrSerialOut = ptrOut;
  3488  0315  0870               	movf	initSerialIO@ptrOut,w
  3489  0316  00F2               	movwf	??_initSerialIO
  3490  0317  0872               	movf	??_initSerialIO,w
  3491  0318  00A1               	movwf	_ptrSerialOut
  3492                           
  3493                           ;serialIO.c: 93:     lenSerialIO = length;
  3494  0319  0871               	movf	initSerialIO@length,w
  3495  031A  00F2               	movwf	??_initSerialIO
  3496  031B  0872               	movf	??_initSerialIO,w
  3497  031C  00A0               	movwf	_lenSerialIO
  3498                           
  3499                           ;serialIO.c: 95:     PORTAbits.RA3 = 0;
  3500  031D  1185               	bcf	5,3	;volatile
  3501                           
  3502                           ;serialIO.c: 96:     ANSELbits.ANS3 = 0;
  3503  031E  1683               	bsf	3,5	;RP0=1, select bank3
  3504  031F  1703               	bsf	3,6	;RP1=1, select bank3
  3505  0320  1188               	bcf	8,3	;volatile
  3506                           
  3507                           ;serialIO.c: 97:     TRISAbits.TRISA3 = 0;
  3508  0321  1683               	bsf	3,5	;RP0=1, select bank1
  3509  0322  1303               	bcf	3,6	;RP1=0, select bank1
  3510  0323  1185               	bcf	5,3	;volatile
  3511                           
  3512                           ;serialIO.c: 100:     PORTAbits.RA2 = 0;
  3513  0324  1283               	bcf	3,5	;RP0=0, select bank0
  3514  0325  1303               	bcf	3,6	;RP1=0, select bank0
  3515  0326  1105               	bcf	5,2	;volatile
  3516                           
  3517                           ;serialIO.c: 101:     ANSELbits.ANS2 = 0;
  3518  0327  1683               	bsf	3,5	;RP0=1, select bank3
  3519  0328  1703               	bsf	3,6	;RP1=1, select bank3
  3520  0329  1108               	bcf	8,2	;volatile
  3521                           
  3522                           ;serialIO.c: 102:     TRISAbits.TRISA2 = 0;
  3523  032A  1683               	bsf	3,5	;RP0=1, select bank1
  3524  032B  1303               	bcf	3,6	;RP1=0, select bank1
  3525  032C  1105               	bcf	5,2	;volatile
  3526                           
  3527                           ;serialIO.c: 105:     PORTAbits.RA0 = 0;
  3528  032D  1283               	bcf	3,5	;RP0=0, select bank0
  3529  032E  1303               	bcf	3,6	;RP1=0, select bank0
  3530  032F  1005               	bcf	5,0	;volatile
  3531                           
  3532                           ;serialIO.c: 106:     ANSELbits.ANS0 = 0;
  3533  0330  1683               	bsf	3,5	;RP0=1, select bank3
  3534  0331  1703               	bsf	3,6	;RP1=1, select bank3
  3535  0332  1008               	bcf	8,0	;volatile
  3536                           
  3537                           ;serialIO.c: 107:     TRISAbits.TRISA0 = 0;
  3538  0333  1683               	bsf	3,5	;RP0=1, select bank1
  3539  0334  1303               	bcf	3,6	;RP1=0, select bank1
  3540  0335  1005               	bcf	5,0	;volatile
  3541                           
  3542                           ;serialIO.c: 110:     ANSELbits.ANS1 = 0;
  3543  0336  1683               	bsf	3,5	;RP0=1, select bank3
  3544  0337  1703               	bsf	3,6	;RP1=1, select bank3
  3545  0338  1088               	bcf	8,1	;volatile
  3546                           
  3547                           ;serialIO.c: 111:     TRISAbits.TRISA1 = 1;
  3548  0339  1683               	bsf	3,5	;RP0=1, select bank1
  3549  033A  1303               	bcf	3,6	;RP1=0, select bank1
  3550  033B  1485               	bsf	5,1	;volatile
  3551                           
  3552                           ;serialIO.c: 115:     SERIALIO.CLK = 0;
  3553  033C  1283               	bcf	3,5	;RP0=0, select bank0
  3554  033D  1303               	bcf	3,6	;RP1=0, select bank0
  3555  033E  1105               	bcf	5,2	;volatile
  3556                           
  3557                           ;serialIO.c: 116:     SERIALIO.OUT = 0;
  3558  033F  1005               	bcf	5,0	;volatile
  3559                           
  3560                           ;serialIO.c: 117:     SERIALIO.SHLD = 1;
  3561  0340  1585               	bsf	5,3	;volatile
  3562  0341  0008               	return
  3563  0342                     __end_of_initSerialIO:	
  3564                           
  3565                           	psect	text16
  3566  03E5                     __ptext16:	
  3567 ;; *************** function _initLCD *****************
  3568 ;; Defined at:
  3569 ;;		line 20 in file "lcd.c"
  3570 ;; Parameters:    Size  Location     Type
  3571 ;;		None
  3572 ;; Auto vars:     Size  Location     Type
  3573 ;;		None
  3574 ;; Return value:  Size  Location     Type
  3575 ;;                  1    wreg      void 
  3576 ;; Registers used:
  3577 ;;		wreg, status,2, status,0, pclath, cstack
  3578 ;; Tracked objects:
  3579 ;;		On entry : 0/0
  3580 ;;		On exit  : 0/0
  3581 ;;		Unchanged: 0/0
  3582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3583 ;;      Params:         0       0       0       0       0
  3584 ;;      Locals:         0       0       0       0       0
  3585 ;;      Temps:          2       0       0       0       0
  3586 ;;      Totals:         2       0       0       0       0
  3587 ;;Total ram usage:        2 bytes
  3588 ;; Hardware stack levels used:    1
  3589 ;; Hardware stack levels required when called:    1
  3590 ;; This function calls:
  3591 ;;		_cmdLCD
  3592 ;; This function is called by:
  3593 ;;		_main
  3594 ;; This function uses a non-reentrant model
  3595 ;;
  3596                           
  3597                           
  3598                           ;psect for function _initLCD
  3599  03E5                     _initLCD:	
  3600                           
  3601                           ;lcd.c: 22:         LCD.B0 = 0;
  3602                           
  3603                           ;incstack = 0
  3604                           ; Regs used in _initLCD: [wreg+status,2+status,0+pclath+cstack]
  3605  03E5  1283               	bcf	3,5	;RP0=0, select bank0
  3606  03E6  1303               	bcf	3,6	;RP1=0, select bank0
  3607  03E7  1308               	bcf	8,6	;volatile
  3608                           
  3609                           ;lcd.c: 23:         LCD.B1 = 0;
  3610  03E8  1388               	bcf	8,7	;volatile
  3611                           
  3612                           ;lcd.c: 24:         LCD.RS = 0;
  3613  03E9  1208               	bcf	8,4	;volatile
  3614                           
  3615                           ;lcd.c: 25:         LCD.BUS = 0x3;
  3616  03EA  0808               	movf	8,w	;volatile
  3617  03EB  39F0               	andlw	-16
  3618  03EC  3803               	iorlw	3
  3619  03ED  0088               	movwf	8	;volatile
  3620                           
  3621                           ;lcd.c: 26:         LCD.EN = 1;
  3622  03EE  1688               	bsf	8,5	;volatile
  3623                           
  3624                           ;lcd.c: 27:         TRISD = 0xC0;
  3625  03EF  30C0               	movlw	192
  3626  03F0  1683               	bsf	3,5	;RP0=1, select bank1
  3627  03F1  1303               	bcf	3,6	;RP1=0, select bank1
  3628  03F2  0088               	movwf	8	;volatile
  3629                           
  3630                           ;lcd.c: 29:         _delay((unsigned long)((100)*(4000000/4000.0)));
  3631  03F3  3082               	movlw	130
  3632  03F4  00F5               	movwf	??_initLCD+1
  3633  03F5  30DD               	movlw	221
  3634  03F6  00F4               	movwf	??_initLCD
  3635  03F7                     u1307:	
  3636  03F7  0BF4               	decfsz	??_initLCD,f
  3637  03F8  2BF7               	goto	u1307
  3638  03F9  0BF5               	decfsz	??_initLCD+1,f
  3639  03FA  2BF7               	goto	u1307
  3640  03FB  2BFC               	nop2
  3641                           
  3642                           ;lcd.c: 31:         cmdLCD(0x20);
  3643  03FC  3020               	movlw	32
  3644  03FD  120A  118A  2424  120A  118A  	fcall	_cmdLCD
  3645                           
  3646                           ;lcd.c: 32:         cmdLCD(0x28);
  3647  0402  3028               	movlw	40
  3648  0403  120A  118A  2424  120A  118A  	fcall	_cmdLCD
  3649                           
  3650                           ;lcd.c: 33:         cmdLCD(0x0C);
  3651  0408  300C               	movlw	12
  3652  0409  120A  118A  2424  120A  118A  	fcall	_cmdLCD
  3653                           
  3654                           ;lcd.c: 34:         cmdLCD(0x01);
  3655  040E  3001               	movlw	1
  3656  040F  120A  118A  2424  120A  118A  	fcall	_cmdLCD
  3657                           
  3658                           ;lcd.c: 35:         cmdLCD(0x02);
  3659  0414  3002               	movlw	2
  3660  0415  120A  118A  2424  120A  118A  	fcall	_cmdLCD
  3661                           
  3662                           ;lcd.c: 37:         _delay((unsigned long)((100)*(4000000/4000.0)));
  3663  041A  3082               	movlw	130
  3664  041B  00F5               	movwf	??_initLCD+1
  3665  041C  30DD               	movlw	221
  3666  041D  00F4               	movwf	??_initLCD
  3667  041E                     u1317:	
  3668  041E  0BF4               	decfsz	??_initLCD,f
  3669  041F  2C1E               	goto	u1317
  3670  0420  0BF5               	decfsz	??_initLCD+1,f
  3671  0421  2C1E               	goto	u1317
  3672  0422  2C23               	nop2
  3673  0423  0008               	return
  3674  0424                     __end_of_initLCD:	
  3675                           
  3676                           	psect	text17
  3677  0424                     __ptext17:	
  3678 ;; *************** function _cmdLCD *****************
  3679 ;; Defined at:
  3680 ;;		line 40 in file "lcd.c"
  3681 ;; Parameters:    Size  Location     Type
  3682 ;;  cmd             1    wreg     unsigned char 
  3683 ;; Auto vars:     Size  Location     Type
  3684 ;;  cmd             1    2[COMMON] unsigned char 
  3685 ;;  nibble          1    3[COMMON] volatile struct .
  3686 ;; Return value:  Size  Location     Type
  3687 ;;                  1    wreg      void 
  3688 ;; Registers used:
  3689 ;;		wreg, status,2, status,0
  3690 ;; Tracked objects:
  3691 ;;		On entry : 0/0
  3692 ;;		On exit  : 0/0
  3693 ;;		Unchanged: 0/0
  3694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3695 ;;      Params:         0       0       0       0       0
  3696 ;;      Locals:         2       0       0       0       0
  3697 ;;      Temps:          2       0       0       0       0
  3698 ;;      Totals:         4       0       0       0       0
  3699 ;;Total ram usage:        4 bytes
  3700 ;; Hardware stack levels used:    1
  3701 ;; This function calls:
  3702 ;;		Nothing
  3703 ;; This function is called by:
  3704 ;;		_initLCD
  3705 ;;		_gotoxy
  3706 ;;		_clearLCD
  3707 ;; This function uses a non-reentrant model
  3708 ;;
  3709                           
  3710                           
  3711                           ;psect for function _cmdLCD
  3712  0424                     _cmdLCD:	
  3713                           
  3714                           ;incstack = 0
  3715                           ; Regs used in _cmdLCD: [wreg+status,2+status,0]
  3716                           ;cmdLCD@cmd stored from wreg
  3717  0424  00F2               	movwf	cmdLCD@cmd
  3718                           
  3719                           ;lcd.c: 40: void cmdLCD( unsigned char cmd );lcd.c: 41: {;lcd.c: 42:         volatile RE
      +                          Gnibble_t nibble;;lcd.c: 44:         nibble.HILO = cmd;
  3720  0425  0872               	movf	cmdLCD@cmd,w
  3721  0426  00F0               	movwf	??_cmdLCD
  3722  0427  0870               	movf	??_cmdLCD,w
  3723  0428  00F3               	movwf	cmdLCD@nibble	;volatile
  3724                           
  3725                           ;lcd.c: 45:         LCD.RS = 0;
  3726  0429  1283               	bcf	3,5	;RP0=0, select bank0
  3727  042A  1303               	bcf	3,6	;RP1=0, select bank0
  3728  042B  1208               	bcf	8,4	;volatile
  3729                           
  3730                           ;lcd.c: 46:         LCD.BUS = nibble.HI ;
  3731  042C  0E73               	swapf	cmdLCD@nibble,w	;volatile
  3732  042D  390F               	andlw	15
  3733  042E  00F0               	movwf	??_cmdLCD
  3734  042F  0808               	movf	8,w	;volatile
  3735  0430  0670               	xorwf	??_cmdLCD,w
  3736  0431  39F0               	andlw	-16
  3737  0432  0670               	xorwf	??_cmdLCD,w
  3738  0433  0088               	movwf	8	;volatile
  3739                           
  3740                           ;lcd.c: 47:          LCD.EN = 0;
  3741  0434  1288               	bcf	8,5	;volatile
  3742                           
  3743                           ;lcd.c: 48:         if( cmd == 0x01 || cmd == 0x02 )
  3744  0435  0372               	decf	cmdLCD@cmd,w
  3745  0436  1903               	btfsc	3,2
  3746  0437  2C3C               	goto	l1613
  3747  0438  3002               	movlw	2
  3748  0439  0672               	xorwf	cmdLCD@cmd,w
  3749  043A  1D03               	btfss	3,2
  3750  043B  2C46               	goto	l1615
  3751  043C                     l1613:	
  3752                           
  3753                           ;lcd.c: 49:         _delay((unsigned long)((2)*(4000000/4000.0)));
  3754  043C  3003               	movlw	3
  3755  043D  00F1               	movwf	??_cmdLCD+1
  3756  043E  3097               	movlw	151
  3757  043F  00F0               	movwf	??_cmdLCD
  3758  0440                     u1327:	
  3759  0440  0BF0               	decfsz	??_cmdLCD,f
  3760  0441  2C40               	goto	u1327
  3761  0442  0BF1               	decfsz	??_cmdLCD+1,f
  3762  0443  2C40               	goto	u1327
  3763  0444  2C45               	nop2
  3764  0445  2C4A               	goto	l1617
  3765  0446                     l1615:	
  3766                           
  3767                           ;lcd.c: 51:         _delay((unsigned long)((40)*(4000000/4000000.0)));
  3768  0446  300D               	movlw	13
  3769  0447  00F0               	movwf	??_cmdLCD
  3770  0448                     u1337:	
  3771  0448  0BF0               	decfsz	??_cmdLCD,f
  3772  0449  2C48               	goto	u1337
  3773  044A                     l1617:	
  3774                           
  3775                           ;lcd.c: 52:         LCD.EN = 1;
  3776  044A  1283               	bcf	3,5	;RP0=0, select bank0
  3777  044B  1303               	bcf	3,6	;RP1=0, select bank0
  3778  044C  1688               	bsf	8,5	;volatile
  3779                           
  3780                           ;lcd.c: 54:         if( cmd != (0x20) )
  3781  044D  3020               	movlw	32
  3782  044E  0672               	xorwf	cmdLCD@cmd,w
  3783  044F  1903               	btfsc	3,2
  3784  0450  0008               	return
  3785                           
  3786                           ;lcd.c: 55:     {;lcd.c: 56:        LCD.RS = 0;
  3787  0451  1208               	bcf	8,4	;volatile
  3788                           
  3789                           ;lcd.c: 57:        LCD.BUS = nibble.LO;
  3790  0452  0873               	movf	cmdLCD@nibble,w	;volatile
  3791  0453  390F               	andlw	15
  3792  0454  00F0               	movwf	??_cmdLCD
  3793  0455  0808               	movf	8,w	;volatile
  3794  0456  0670               	xorwf	??_cmdLCD,w
  3795  0457  39F0               	andlw	-16
  3796  0458  0670               	xorwf	??_cmdLCD,w
  3797  0459  0088               	movwf	8	;volatile
  3798                           
  3799                           ;lcd.c: 58:        LCD.EN = 0;
  3800  045A  1288               	bcf	8,5	;volatile
  3801                           
  3802                           ;lcd.c: 59:        if( cmd == 0x01 || cmd == 0x02 )
  3803  045B  0372               	decf	cmdLCD@cmd,w
  3804  045C  1903               	btfsc	3,2
  3805  045D  2C62               	goto	l1629
  3806  045E  3002               	movlw	2
  3807  045F  0672               	xorwf	cmdLCD@cmd,w
  3808  0460  1D03               	btfss	3,2
  3809  0461  2C6C               	goto	l1631
  3810  0462                     l1629:	
  3811                           
  3812                           ;lcd.c: 60:             _delay((unsigned long)((2)*(4000000/4000.0)));
  3813  0462  3003               	movlw	3
  3814  0463  00F1               	movwf	??_cmdLCD+1
  3815  0464  3097               	movlw	151
  3816  0465  00F0               	movwf	??_cmdLCD
  3817  0466                     u1347:	
  3818  0466  0BF0               	decfsz	??_cmdLCD,f
  3819  0467  2C66               	goto	u1347
  3820  0468  0BF1               	decfsz	??_cmdLCD+1,f
  3821  0469  2C66               	goto	u1347
  3822  046A  2C6B               	nop2
  3823  046B  2C70               	goto	l1633
  3824  046C                     l1631:	
  3825                           
  3826                           ;lcd.c: 62:             _delay((unsigned long)((40)*(4000000/4000000.0)));
  3827  046C  300D               	movlw	13
  3828  046D  00F0               	movwf	??_cmdLCD
  3829  046E                     u1357:	
  3830  046E  0BF0               	decfsz	??_cmdLCD,f
  3831  046F  2C6E               	goto	u1357
  3832  0470                     l1633:	
  3833                           
  3834                           ;lcd.c: 63:        LCD.EN = 1;
  3835  0470  1283               	bcf	3,5	;RP0=0, select bank0
  3836  0471  1303               	bcf	3,6	;RP1=0, select bank0
  3837  0472  1688               	bsf	8,5	;volatile
  3838  0473  0008               	return
  3839  0474                     __end_of_cmdLCD:	
  3840                           
  3841                           	psect	text18
  3842  0255                     __ptext18:	
  3843 ;; *************** function _initKeyboard *****************
  3844 ;; Defined at:
  3845 ;;		line 103 in file "keyboard.c"
  3846 ;; Parameters:    Size  Location     Type
  3847 ;;		None
  3848 ;; Auto vars:     Size  Location     Type
  3849 ;;		None
  3850 ;; Return value:  Size  Location     Type
  3851 ;;                  1    wreg      void 
  3852 ;; Registers used:
  3853 ;;		wreg, status,2
  3854 ;; Tracked objects:
  3855 ;;		On entry : 0/0
  3856 ;;		On exit  : 0/0
  3857 ;;		Unchanged: 0/0
  3858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3859 ;;      Params:         0       0       0       0       0
  3860 ;;      Locals:         0       0       0       0       0
  3861 ;;      Temps:          0       0       0       0       0
  3862 ;;      Totals:         0       0       0       0       0
  3863 ;;Total ram usage:        0 bytes
  3864 ;; Hardware stack levels used:    1
  3865 ;; This function calls:
  3866 ;;		Nothing
  3867 ;; This function is called by:
  3868 ;;		_main
  3869 ;; This function uses a non-reentrant model
  3870 ;;
  3871                           
  3872                           
  3873                           ;psect for function _initKeyboard
  3874  0255                     _initKeyboard:	
  3875                           
  3876                           ;keyboard.c: 105:     PORTB = 0xFF;
  3877                           
  3878                           ;incstack = 0
  3879                           ; Regs used in _initKeyboard: [wreg+status,2]
  3880  0255  30FF               	movlw	255
  3881  0256  1283               	bcf	3,5	;RP0=0, select bank0
  3882  0257  1303               	bcf	3,6	;RP1=0, select bank0
  3883  0258  0086               	movwf	6	;volatile
  3884                           
  3885                           ;keyboard.c: 106:     ANSELH = 0;
  3886  0259  1683               	bsf	3,5	;RP0=1, select bank3
  3887  025A  1703               	bsf	3,6	;RP1=1, select bank3
  3888  025B  0189               	clrf	9	;volatile
  3889                           
  3890                           ;keyboard.c: 107:     TRISB = 0x0F;
  3891  025C  300F               	movlw	15
  3892  025D  1683               	bsf	3,5	;RP0=1, select bank1
  3893  025E  1303               	bcf	3,6	;RP1=0, select bank1
  3894  025F  0086               	movwf	6	;volatile
  3895                           
  3896                           ;keyboard.c: 108:     WPUB = 0xFF;
  3897  0260  30FF               	movlw	255
  3898  0261  0095               	movwf	21	;volatile
  3899                           
  3900                           ;keyboard.c: 109:     OPTION_REGbits.nRBPU = 0;
  3901  0262  1381               	bcf	1,7	;volatile
  3902                           
  3903                           ;keyboard.c: 111:     prevKey = 0;
  3904  0263  1283               	bcf	3,5	;RP0=0, select bank0
  3905  0264  1303               	bcf	3,6	;RP1=0, select bank0
  3906  0265  01A4               	clrf	_prevKey
  3907                           
  3908                           ;keyboard.c: 112:     currKey = 0;
  3909  0266  01A3               	clrf	_currKey
  3910  0267  0008               	return
  3911  0268                     __end_of_initKeyboard:	
  3912                           
  3913                           	psect	text19
  3914  02BA                     __ptext19:	
  3915 ;; *************** function _getFIFO *****************
  3916 ;; Defined at:
  3917 ;;		line 25 in file "fifo.c"
  3918 ;; Parameters:    Size  Location     Type
  3919 ;;		None
  3920 ;; Auto vars:     Size  Location     Type
  3921 ;;  aux             1    1[COMMON] unsigned char 
  3922 ;; Return value:  Size  Location     Type
  3923 ;;                  1    wreg      unsigned char 
  3924 ;; Registers used:
  3925 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3926 ;; Tracked objects:
  3927 ;;		On entry : 0/0
  3928 ;;		On exit  : 0/0
  3929 ;;		Unchanged: 0/0
  3930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3931 ;;      Params:         0       0       0       0       0
  3932 ;;      Locals:         1       0       0       0       0
  3933 ;;      Temps:          1       0       0       0       0
  3934 ;;      Totals:         2       0       0       0       0
  3935 ;;Total ram usage:        2 bytes
  3936 ;; Hardware stack levels used:    1
  3937 ;; This function calls:
  3938 ;;		Nothing
  3939 ;; This function is called by:
  3940 ;;		_main
  3941 ;;		_checktecla
  3942 ;; This function uses a non-reentrant model
  3943 ;;
  3944                           
  3945                           
  3946                           ;psect for function _getFIFO
  3947  02BA                     _getFIFO:	
  3948                           
  3949                           ;fifo.c: 27:     unsigned char aux = 0;
  3950                           
  3951                           ;incstack = 0
  3952                           ; Regs used in _getFIFO: [wreg-fsr0h+status,2+status,0]
  3953  02BA  01F1               	clrf	getFIFO@aux
  3954                           
  3955                           ;fifo.c: 29:     if( fifoTail != fifoHead )
  3956  02BB  1283               	bcf	3,5	;RP0=0, select bank0
  3957  02BC  1303               	bcf	3,6	;RP1=0, select bank0
  3958  02BD  0825               	movf	_fifoTail,w
  3959  02BE  067D               	xorwf	_fifoHead,w
  3960  02BF  1903               	skipnz
  3961  02C0  2ACE               	goto	l1715
  3962                           
  3963                           ;fifo.c: 30:     {;fifo.c: 31:         aux = fifo[ fifoTail ];
  3964  02C1  0825               	movf	_fifoTail,w
  3965  02C2  3E26               	addlw	(low (_fifo| 0))& (0+255)
  3966  02C3  0084               	movwf	4
  3967  02C4  1383               	bcf	3,7	;select IRP bank0
  3968  02C5  0800               	movf	0,w
  3969  02C6  00F0               	movwf	??_getFIFO
  3970  02C7  0870               	movf	??_getFIFO,w
  3971  02C8  00F1               	movwf	getFIFO@aux
  3972                           
  3973                           ;fifo.c: 32:         ++fifoTail;
  3974  02C9  3001               	movlw	1
  3975  02CA  00F0               	movwf	??_getFIFO
  3976  02CB  0870               	movf	??_getFIFO,w
  3977  02CC  07A5               	addwf	_fifoTail,f
  3978                           
  3979                           ;fifo.c: 33:     }
  3980  02CD  2ADE               	goto	l1721
  3981  02CE                     l1715:	
  3982  02CE  087D               	movf	_fifoHead,w
  3983  02CF  00F0               	movwf	??_getFIFO
  3984  02D0  0870               	movf	??_getFIFO,w
  3985  02D1  00A5               	movwf	_fifoTail
  3986  02D2  0825               	movf	_fifoTail,w
  3987  02D3  1903               	btfsc	3,2
  3988  02D4  2ADE               	goto	l1721
  3989                           
  3990                           ;fifo.c: 35:     {;fifo.c: 36:         fifoTail = 0;
  3991  02D5  01A5               	clrf	_fifoTail
  3992                           
  3993                           ;fifo.c: 37:         aux = fifo[ fifoTail ];
  3994  02D6  0825               	movf	_fifoTail,w
  3995  02D7  3E26               	addlw	(low (_fifo| 0))& (0+255)
  3996  02D8  0084               	movwf	4
  3997  02D9  1383               	bcf	3,7	;select IRP bank0
  3998  02DA  0800               	movf	0,w
  3999  02DB  00F0               	movwf	??_getFIFO
  4000  02DC  0870               	movf	??_getFIFO,w
  4001  02DD  00F1               	movwf	getFIFO@aux
  4002  02DE                     l1721:	
  4003                           
  4004                           ;fifo.c: 39:     return( aux );
  4005  02DE  0871               	movf	getFIFO@aux,w
  4006  02DF  0008               	return
  4007  02E0                     __end_of_getFIFO:	
  4008                           
  4009                           	psect	text20
  4010  01F6                     __ptext20:	
  4011 ;; *************** function _displayFIFO *****************
  4012 ;; Defined at:
  4013 ;;		line 47 in file "fifo.c"
  4014 ;; Parameters:    Size  Location     Type
  4015 ;;		None
  4016 ;; Auto vars:     Size  Location     Type
  4017 ;;		None
  4018 ;; Return value:  Size  Location     Type
  4019 ;;                  1    wreg      PTR void 
  4020 ;; Registers used:
  4021 ;;		wreg
  4022 ;; Tracked objects:
  4023 ;;		On entry : 0/0
  4024 ;;		On exit  : 0/0
  4025 ;;		Unchanged: 0/0
  4026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4027 ;;      Params:         0       0       0       0       0
  4028 ;;      Locals:         0       0       0       0       0
  4029 ;;      Temps:          0       0       0       0       0
  4030 ;;      Totals:         0       0       0       0       0
  4031 ;;Total ram usage:        0 bytes
  4032 ;; Hardware stack levels used:    1
  4033 ;; This function calls:
  4034 ;;		Nothing
  4035 ;; This function is called by:
  4036 ;;		_main
  4037 ;; This function uses a non-reentrant model
  4038 ;;
  4039                           
  4040                           
  4041                           ;psect for function _displayFIFO
  4042  01F6                     _displayFIFO:	
  4043                           
  4044                           ;fifo.c: 49:     return( fifo );
  4045                           
  4046                           ;incstack = 0
  4047                           ; Regs used in _displayFIFO: [wreg]
  4048  01F6  3026               	movlw	(low (_fifo| 0))& (0+255)
  4049  01F7  0008               	return
  4050  01F8                     __end_of_displayFIFO:	
  4051                           
  4052                           	psect	text21
  4053  01F8                     __ptext21:	
  4054 ;; *************** function _currentKey *****************
  4055 ;; Defined at:
  4056 ;;		line 65 in file "keyboard.c"
  4057 ;; Parameters:    Size  Location     Type
  4058 ;;		None
  4059 ;; Auto vars:     Size  Location     Type
  4060 ;;		None
  4061 ;; Return value:  Size  Location     Type
  4062 ;;                  1    wreg      unsigned char 
  4063 ;; Registers used:
  4064 ;;		wreg
  4065 ;; Tracked objects:
  4066 ;;		On entry : 0/0
  4067 ;;		On exit  : 0/0
  4068 ;;		Unchanged: 0/0
  4069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4070 ;;      Params:         0       0       0       0       0
  4071 ;;      Locals:         0       0       0       0       0
  4072 ;;      Temps:          0       0       0       0       0
  4073 ;;      Totals:         0       0       0       0       0
  4074 ;;Total ram usage:        0 bytes
  4075 ;; Hardware stack levels used:    1
  4076 ;; This function calls:
  4077 ;;		Nothing
  4078 ;; This function is called by:
  4079 ;;		_main
  4080 ;; This function uses a non-reentrant model
  4081 ;;
  4082                           
  4083                           
  4084                           ;psect for function _currentKey
  4085  01F8                     _currentKey:	
  4086                           
  4087                           ;keyboard.c: 67:     return( currKey );
  4088                           
  4089                           ;incstack = 0
  4090                           ; Regs used in _currentKey: [wreg]
  4091  01F8  1283               	bcf	3,5	;RP0=0, select bank0
  4092  01F9  1303               	bcf	3,6	;RP1=0, select bank0
  4093  01FA  0823               	movf	_currKey,w
  4094  01FB  0008               	return
  4095  01FC                     __end_of_currentKey:	
  4096  007E                     btemp	set	126	;btemp
  4097  007E                     wtemp0	set	126


Data Sizes:
    Strings     42
    Constant    22
    Data        17
    BSS         23
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     16      55
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    initSerialIO@ptrOut	PTR unsigned char  size(1) Largest target is 1
		 -> main@atuador(BANK0[1]), 

    initSerialIO@ptrIn	PTR unsigned char  size(1) Largest target is 1
		 -> main@sensor(BANK0[1]), 

    ptrSerialOut	PTR unsigned char  size(1) Largest target is 1
		 -> NULL(NULL[0]), main@atuador(BANK0[1]), 

    ptrSerialIn	PTR unsigned char  size(1) Largest target is 1
		 -> NULL(NULL[0]), main@sensor(BANK0[1]), 

    writeLCD@ptr	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_3(CODE[17]), STR_2(CODE[12]), STR_1(CODE[13]), checktecla@linha2(BANK0[17]), 
		 -> fifo(BANK0[16]), 

    sp__displayFIFO	PTR void  size(1) Largest target is 16
		 -> fifo(BANK0[16]), 


Critical Paths under _main in COMMON

    _main->_writeLCD
    _serialIOscan->_serialIObyteShift
    _screen_menu->_writeLCD
    _screen_car->_writeLCD
    _writeLCD->_gotoxy
    _gotoxy->_cmdLCD
    _clearLCD->_cmdLCD
    _resetFIFO->_delFIFO
    _initLCD->_cmdLCD

Critical Paths under _main in BANK0

    _main->_screen_car

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                13    13      0    5987
                                              3 BANK0     13    13      0
                           _clearLCD
                         _currentKey
                            _delFIFO
                        _displayFIFO
                            _getFIFO
                       _initKeyboard
                            _initLCD
                       _initSerialIO
                       _keyboardScan
                        _previousKey
                            _putFIFO
                          _resetFIFO
                         _screen_car
                        _screen_menu
                       _serialIOscan
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _serialIOscan                                         6     6      0     205
                                              4 COMMON     6     6      0
                  _serialIObyteShift
                       _serialIOload
 ---------------------------------------------------------------------------------
 (2) _serialIOload                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _serialIObyteShift                                    4     4      0     114
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _screen_menu                                          0     0      0    1213
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _screen_car                                           3     3      0    1390
                                              0 BANK0      3     3      0
                           _clearLCD
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _writeLCD                                             5     2      3    1213
                                              8 COMMON     5     2      3
                        _displayFIFO (ARG)
                             _gotoxy
                             _putLCD
 ---------------------------------------------------------------------------------
 (2) _putLCD                                               4     4      0      67
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) _gotoxy                                               4     3      1     297
                                              4 COMMON     4     3      1
                             _cmdLCD
 ---------------------------------------------------------------------------------
 (2) _clearLCD                                             0     0      0     177
                             _cmdLCD
 ---------------------------------------------------------------------------------
 (1) _resetFIFO                                            0     0      0      46
                            _delFIFO
 ---------------------------------------------------------------------------------
 (2) _delFIFO                                              3     3      0      46
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _putFIFO                                              2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _previousKey                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _keyboardScan                                        11    11      0     210
                                              0 COMMON    11    11      0
 ---------------------------------------------------------------------------------
 (1) _initSerialIO                                         4     2      2     251
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              2     2      0     177
                                              4 COMMON     2     2      0
                             _cmdLCD
 ---------------------------------------------------------------------------------
 (3) _cmdLCD                                               4     4      0     177
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _initKeyboard                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getFIFO                                              2     2      0      25
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _displayFIFO                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _currentKey                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearLCD
     _cmdLCD
   _currentKey
   _delFIFO
   _displayFIFO
   _getFIFO
   _initKeyboard
   _initLCD
     _cmdLCD
   _initSerialIO
   _keyboardScan
   _previousKey
   _putFIFO
   _resetFIFO
     _delFIFO
   _screen_car
     _clearLCD
       _cmdLCD
     _writeLCD
       _displayFIFO (ARG)
       _gotoxy (ARG)
         _cmdLCD
       _putLCD (ARG)
   _screen_menu
     _writeLCD
       _displayFIFO (ARG)
       _gotoxy (ARG)
         _cmdLCD
       _putLCD (ARG)
   _serialIOscan
     _serialIObyteShift
     _serialIOload
   _writeLCD
     _displayFIFO (ARG)
     _gotoxy (ARG)
       _cmdLCD
     _putLCD (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     10      37       5       68.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      45      12        0.0%
ABS                  0      0      45       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Nov 21 20:33:43 2019

              ?_displayFIFO 0070                           pc 0002                          l24 0293  
                        fsr 0004                         l221 0588                         l222 058B  
                       l215 057B                         l224 058E                         l216 057E  
                       l321 02B5                         l225 0591                         l218 0582  
                       l251 0638                         l219 0585                         l252 063D  
                       l245 062C                         l318 02AA                         l254 0640  
                       l246 062F                         l319 02AB                         l255 0646  
                       l248 0632                         l249 0635                         l290 075B  
                       l292 0760                         l276 0748                         l286 0751  
                       l288 0756                         _LCD 0008                         u645 026F  
                       u744 0480                         u745 047E                         u754 04A0  
                       u755 049D                         u775 04AF                         fsr0 0004  
                       indf 0000                __CFG_LVP$OFF 0000                        l2001 05B4  
                      l2101 0754                        l2021 0608                        l2013 05E6  
                      l2005 05C4                        l2103 0759                        l2111 078C  
                      l2113 0792                        l2105 075E                        l2121 07E1  
                      l2025 0619                        l2017 05F7                        l2009 05D5  
                      l2109 0763                        l2061 06EB                        l2117 0797  
                      l2071 0708                        l2063 06F3                        l2119 07D1  
                      l2055 06DE                        l2047 0649                        l2049 06C3  
                      l1613 043C                        l2085 072A                        l2077 0715  
                      l2069 0700                        l1631 046C                        l1615 0446  
                      l2271 0772                        l2087 0732                        l2079 071D  
                      l1721 02DE                        l1633 0470                        l1617 044A  
                      l2273 079F                        l2097 0748                        l1715 02CE  
                      l2099 074F                        l2267 0653                        l1629 0462  
                      l2269 06BB                        l1903 0500                        l1761 04C2  
                      l1745 0476                        l1665 0280                        l1921 0527  
                      l1913 051B                        l1667 0296                        l1907 050B  
                      l1757 048F                        l1677 02EB                        l1693 02B1  
                      l1861 03A9                        l1941 0545                        l1933 0539  
                      l1925 052D                        l1917 0521                        l1769 04CF  
                      l1697 029E                        l1961 0563                        l1953 0557  
                      l1945 054B                        l1937 053F                        l1929 0533  
                      l1859 0383                        l1973 0575                        l1965 0569  
                      l1957 055D                        l1949 0551                        l1993 0594  
                      l1969 056F                        l1979 0580                        l1997 05A4  
               main@atuador 0051                        STR_1 003A                        STR_2 0047  
                      STR_3 0029                        u1207 05CC                        u1217 05DD  
                      u1307 03F7                        u1227 05EE                        u1317 041E  
                      u1237 05FF                        u1327 0440                        u1247 0610  
                      u1337 0448                        u1257 0621                        u1177 059C  
                      u1347 0466                        u1267 03C0                        u1187 05AC  
                      u1357 046E                        u1277 03DB                        u1197 05BC  
                      u1287 0357                        u1297 036D                        _WPUB 0095  
                      _fifo 0026                        _main 04DA                        btemp 007E  
                      start 0000                       ?_main 0070               __CFG_WDTE$OFF 0000  
           __end_of_delFIFO 0298                       _PORTB 0006             __end_of_getFIFO 02E0  
                     _TRISB 0086                       _TRISD 0088             __end_of_initLCD 0424  
                     main@a 004D                       main@b 004E                       main@c 004F  
                     main@d 0050             __end_of_putFIFO 0233                       pclath 000A  
                     status 0003                       wtemp0 007E              __CFG_MCLRE$OFF 0000  
           __initialization 07E7                __end_of_main 07E7               ?_initKeyboard 0070  
                    ??_main 004A               ?_initSerialIO 0070                      _ANSELH 0189  
              ?_screen_menu 0070               ?_keyboardScan 0070            __end_of_clearLCD 0205  
                    _cmdLCD 0424              ??_initKeyboard 0070                   ??_delFIFO 0070  
                 ??_getFIFO 0070        __size_of_displayFIFO 0002                      _gotoxy 0268  
                    _putLCD 0342              ??_initSerialIO 0072                   ??_initLCD 0074  
                 ??_putFIFO 0070            __end_of_writeLCD 030E              ??_keyboardScan 0070  
              ?_previousKey 0070     __end_of__initialization 07FC           _serialIObyteShift 0298  
        ?_serialIObyteShift 0070              __pcstackCOMMON 0070                __pidataBANK0 0244  
       ??_serialIObyteShift 0070              _OPTION_REGbits 0081           initSerialIO@ptrIn 0073  
                delFIFO@ret 0072                  __pbssBANK0 0020   __end_of_serialIObyteShift 02BA  
      __end_of_indicePassos 0028                  __pmaintext 04DA                cmdLCD@nibble 0073  
                   ?_cmdLCD 0070          __size_of_resetFIFO 0009                     ?_gotoxy 0074  
                   ?_putLCD 0070     serialIObyteShift@dataIn 0071                   ?_clearLCD 0070  
      __end_of_initKeyboard 0268                  __stringtab 0003               ?_serialIOload 0070  
             ?_serialIOscan 0070        __end_of_initSerialIO 0342        __size_of_screen_menu 000A  
                getFIFO@aux 0071             __size_of_cmdLCD 0050                     _delFIFO 027E  
                _currentKey 01F8                     _getFIFO 02BA                   _ANSELbits 0188  
      __end_of_keyboardScan 04DA             __size_of_gotoxy 0016                   ?_writeLCD 0078  
           __size_of_putLCD 0034                     __ptext1 0376                     __ptext2 0205  
                   __ptext3 0298                     __ptext4 021B                     __ptext5 03AD  
                   __ptext6 02E0                     __ptext7 0342                     __ptext8 0268  
                   __ptext9 0200                     _initLCD 03E5                     _currKey 0023  
                ??_clearLCD 0074                     _putFIFO 0225             checktecla@F1330 0036  
                   _prevKey 0024                     clrloop0 020B        end_of_initialization 07FC  
         __end_of_resetFIFO 021B              ??_serialIOload 0070              ??_serialIOscan 0074  
__size_of_serialIObyteShift 0022                     gotoxy@x 0077                     gotoxy@y 0074  
                _screen_car 03AD        __size_of_previousKey 0004                     putLCD@c 0072  
                ??_writeLCD 007B                   _PORTAbits 0005       __end_of_indPassosSize 0029  
              _KEYBOARDbits 0006                   _TRISAbits 0085             keyboardScan@aux 0078  
                main@estado 0054                  main@sensor 0052               ??_displayFIFO 0070  
            __end_of_cmdLCD 0474                 ?_currentKey 0070                _indicePassos 0023  
            __end_of_gotoxy 027E              __end_of_putLCD 0376         start_initialization 07E7  
     __size_of_initKeyboard 0013       __size_of_initSerialIO 0034          initSerialIO@length 0071  
               ?_screen_car 0070          initSerialIO@ptrOut 0070    __CFG_FOSC$INTRC_NOCLKOUT 0000  
     __size_of_keyboardScan 0066                    ??_cmdLCD 0070                  init_fetch0 0233  
            _keyboardMatrix 0013                 __pdataBANK0 0036                _initKeyboard 0255  
                  ??_gotoxy 0075                    ??_putLCD 0070        __end_of_serialIOload 020A  
      __end_of_serialIOscan 03AD         __end_of_displayFIFO 01F8                _initSerialIO 030E  
               __pbssCOMMON 007D                   ___latbits 0002               __pcstackBANK0 0047  
         __size_of_clearLCD 0005         __size_of_currentKey 0004                _keyboardScan 0474  
    __end_of_keyboardMatrix 0023                   cmdLCD@cmd 0072                    ?_delFIFO 0070  
             serialIOscan@i 0079               serialIOscan@j 0078                    ?_getFIFO 0070  
                 __pstrings 0003                    ?_initLCD 0070           __size_of_writeLCD 002E  
       __size_of_screen_car 0038                    ?_putFIFO 0070    serialIObyteShift@dataBit 0073  
  serialIObyteShift@dataOut 0072                 writeLCD@ptr 0079               ??_screen_menu 007D  
                 clear_ram0 020A                   _resetFIFO 0212                    _SERIALIO 0005  
               _displayFIFO 01F6                 __stringbase 0012                putLCD@nibble 0073  
               _lenSerialIO 0020                   main@tecla 0053               ??_previousKey 0070  
                ?_resetFIFO 0070         __end_of_screen_menu 0225       __size_of_serialIOload 0005  
     __size_of_serialIOscan 0037                ??_currentKey 0070            __size_of_delFIFO 001A  
          __size_of_getFIFO 0026          __end_of__stringtab 0013                    delFIFO@n 0071  
          __size_of_initLCD 003F                    _clearLCD 0200                    _fifoHead 007D  
          __size_of_putFIFO 000E                    _fifoTail 0025                    __ptext10 0212  
                  __ptext11 027E                    __ptext20 01F6                    __ptext12 0225  
                  __ptext21 01F8                    __ptext13 01FC                    __ptext14 0474  
                  __ptext15 030E                    __ptext16 03E5                    __ptext17 0424  
                  __ptext18 0255                    __ptext19 02BA                _serialIOload 0205  
              _serialIOscan 0376               __size_of_main 030D          __end_of_currentKey 01FC  
              ??_screen_car 0047         __end_of_previousKey 0200               keyboardScan@i 0079  
             keyboardScan@j 007A                    main@rest 0056                    _writeLCD 02E0  
        __end_of_screen_car 03E5                    init_ram0 0237                 _screen_menu 021B  
                  putFIFO@c 0071                 ??_resetFIFO 0073                   writeLCD@x 007C  
                 writeLCD@y 0078                   stringcode 000D                _ptrSerialOut 0021  
             _indPassosSize 0028                    stringdir 000D                    stringtab 0003  
               _ptrSerialIn 0022                 _previousKey 01FC  
